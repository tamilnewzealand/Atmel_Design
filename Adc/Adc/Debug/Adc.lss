
Adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000272  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000173  00000000  00000000  00000772  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000187  00000000  00000000  000008e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f2  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020a  00000000  00000000  00000cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  78:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART0Init>:
#define POT 50

void USART0Init(void) {
	
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
  80:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)UBRR_VALUE;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24
	
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  8a:	e2 ec       	ldi	r30, 0xC2	; 194
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	86 60       	ori	r24, 0x06	; 6
  92:	80 83       	st	Z, r24
	
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
  94:	e1 ec       	ldi	r30, 0xC1	; 193
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	88 61       	ori	r24, 0x18	; 24
  9c:	80 83       	st	Z, r24
  9e:	08 95       	ret

000000a0 <USART0SendByte>:
}*/

int USART0SendByte(uint8_t data) {
	
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	95 ff       	sbrs	r25, 5
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <USART0SendByte+0x4>
	
	// Transmit data
	UDR0 = data;
  aa:	80 93 c6 00 	sts	0x00C6, r24
	return 0;
}
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret

000000b4 <USART0TransmitNumber>:

void USART0TransmitNumber(double value) {
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	6b 01       	movw	r12, r22
  c2:	7c 01       	movw	r14, r24
	
	uint8_t digit;
	digit = (uint8_t)value / 10;
  c4:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
  c8:	d6 2f       	mov	r29, r22
  ca:	cd ec       	ldi	r28, 0xCD	; 205
  cc:	6c 9f       	mul	r22, r28
  ce:	c1 2d       	mov	r28, r1
  d0:	11 24       	eor	r1, r1
  d2:	c6 95       	lsr	r28
  d4:	c6 95       	lsr	r28
  d6:	c6 95       	lsr	r28
	digit |= (1 << 6);
	digit |= (1 << 5);
	digit &=~ (1 << 4);
  d8:	8c 2f       	mov	r24, r28
  da:	8f 7e       	andi	r24, 0xEF	; 239
	USART0SendByte(digit);
  dc:	80 66       	ori	r24, 0x60	; 96
  de:	0e 94 50 00 	call	0xa0	; 0xa0 <USART0SendByte>
	
	digit = (uint8_t)value % 10;
  e2:	cc 0f       	add	r28, r28
  e4:	8c 2f       	mov	r24, r28
  e6:	88 0f       	add	r24, r24
  e8:	88 0f       	add	r24, r24
  ea:	c8 0f       	add	r28, r24
  ec:	8d 2f       	mov	r24, r29
  ee:	8c 1b       	sub	r24, r28
	digit |= (1 << 6);
	digit &=~ (1 << 5);
  f0:	8f 7d       	andi	r24, 0xDF	; 223
	digit |= (1 << 4);
	USART0SendByte(digit);
  f2:	80 65       	ori	r24, 0x50	; 80
  f4:	0e 94 50 00 	call	0xa0	; 0xa0 <USART0SendByte>
	
	value *= 10;
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	40 e2       	ldi	r20, 0x20	; 32
  fe:	51 e4       	ldi	r21, 0x41	; 65
 100:	c7 01       	movw	r24, r14
 102:	b6 01       	movw	r22, r12
 104:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__mulsf3>
	digit = (uint8_t)value & 10;
 108:	0e 94 ce 00 	call	0x19c	; 0x19c <__fixunssfsi>
	digit &=~ (1 << 6);
	digit &=~ (1 << 5);
	digit &=~ (1 << 4);
	USART0SendByte(digit);
 10c:	86 2f       	mov	r24, r22
 10e:	8a 70       	andi	r24, 0x0A	; 10
 110:	0e 94 50 00 	call	0xa0	; 0xa0 <USART0SendByte>
	
	USART0SendByte(0x0A);
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	0e 94 50 00 	call	0xa0	; 0xa0 <USART0SendByte>
	
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	08 95       	ret

00000128 <InitADC>:
//FILE usart0_str = FDEV_SETUP_STREAM(USART0SendByte, NULL, _FDEV_SETUP_WRITE);

void InitADC() {
	
	// Select Vref=AVcc
	ADMUX |= (1<<REFS0);
 128:	ec e7       	ldi	r30, 0x7C	; 124
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	80 83       	st	Z, r24
	
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	87 68       	ori	r24, 0x87	; 135
 13a:	80 83       	st	Z, r24
 13c:	08 95       	ret

0000013e <ReadADC>:
}

uint16_t ReadADC(uint8_t ADCchannel) {
	
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
 13e:	ec e7       	ldi	r30, 0x7C	; 124
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	90 81       	ld	r25, Z
 144:	8f 70       	andi	r24, 0x0F	; 15
 146:	90 7f       	andi	r25, 0xF0	; 240
 148:	89 2b       	or	r24, r25
 14a:	80 83       	st	Z, r24
	
	//single conversion mode
	ADCSRA |= (1<<ADSC);
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 64       	ori	r24, 0x40	; 64
 154:	80 83       	st	Z, r24
	
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
 156:	80 81       	ld	r24, Z
 158:	86 fd       	sbrc	r24, 6
 15a:	fd cf       	rjmp	.-6      	; 0x156 <ReadADC+0x18>
	return ADC;
 15c:	80 91 78 00 	lds	r24, 0x0078
 160:	90 91 79 00 	lds	r25, 0x0079
}
 164:	08 95       	ret

00000166 <main>:
	
	//double vbg;
	double potval;
	//initialize ADC
	
	InitADC();
 166:	0e 94 94 00 	call	0x128	; 0x128 <InitADC>
	//Initialize USART0
	
	USART0Init();
 16a:	0e 94 40 00 	call	0x80	; 0x80 <USART0Init>
	//stdout=&usart0_str;
	
	while(1) {
		
		//reading potentiometer value and recalculating to Ohms
		potval=(double)POT/1024*ReadADC(0);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 9f 00 	call	0x13e	; 0x13e <ReadADC>
 174:	bc 01       	movw	r22, r24
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__floatunsisf>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	48 e4       	ldi	r20, 0x48	; 72
 184:	5d e3       	ldi	r21, 0x3D	; 61
 186:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__mulsf3>
		
		USART0TransmitNumber(potval);
 18a:	0e 94 5a 00 	call	0xb4	; 0xb4 <USART0TransmitNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x2c>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x32>
 198:	00 00       	nop
 19a:	e9 cf       	rjmp	.-46     	; 0x16e <main+0x8>

0000019c <__fixunssfsi>:
 19c:	0e 94 42 01 	call	0x284	; 0x284 <__fp_splitA>
 1a0:	88 f0       	brcs	.+34     	; 0x1c4 <__fixunssfsi+0x28>
 1a2:	9f 57       	subi	r25, 0x7F	; 127
 1a4:	98 f0       	brcs	.+38     	; 0x1cc <__fixunssfsi+0x30>
 1a6:	b9 2f       	mov	r27, r25
 1a8:	99 27       	eor	r25, r25
 1aa:	b7 51       	subi	r27, 0x17	; 23
 1ac:	b0 f0       	brcs	.+44     	; 0x1da <__fixunssfsi+0x3e>
 1ae:	e1 f0       	breq	.+56     	; 0x1e8 <__fixunssfsi+0x4c>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	88 1f       	adc	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	1a f0       	brmi	.+6      	; 0x1c0 <__fixunssfsi+0x24>
 1ba:	ba 95       	dec	r27
 1bc:	c9 f7       	brne	.-14     	; 0x1b0 <__fixunssfsi+0x14>
 1be:	14 c0       	rjmp	.+40     	; 0x1e8 <__fixunssfsi+0x4c>
 1c0:	b1 30       	cpi	r27, 0x01	; 1
 1c2:	91 f0       	breq	.+36     	; 0x1e8 <__fixunssfsi+0x4c>
 1c4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__fp_zero>
 1c8:	b1 e0       	ldi	r27, 0x01	; 1
 1ca:	08 95       	ret
 1cc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__fp_zero>
 1d0:	67 2f       	mov	r22, r23
 1d2:	78 2f       	mov	r23, r24
 1d4:	88 27       	eor	r24, r24
 1d6:	b8 5f       	subi	r27, 0xF8	; 248
 1d8:	39 f0       	breq	.+14     	; 0x1e8 <__fixunssfsi+0x4c>
 1da:	b9 3f       	cpi	r27, 0xF9	; 249
 1dc:	cc f3       	brlt	.-14     	; 0x1d0 <__fixunssfsi+0x34>
 1de:	86 95       	lsr	r24
 1e0:	77 95       	ror	r23
 1e2:	67 95       	ror	r22
 1e4:	b3 95       	inc	r27
 1e6:	d9 f7       	brne	.-10     	; 0x1de <__fixunssfsi+0x42>
 1e8:	3e f4       	brtc	.+14     	; 0x1f8 <__fixunssfsi+0x5c>
 1ea:	90 95       	com	r25
 1ec:	80 95       	com	r24
 1ee:	70 95       	com	r23
 1f0:	61 95       	neg	r22
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	8f 4f       	sbci	r24, 0xFF	; 255
 1f6:	9f 4f       	sbci	r25, 0xFF	; 255
 1f8:	08 95       	ret

000001fa <__floatunsisf>:
 1fa:	e8 94       	clt
 1fc:	09 c0       	rjmp	.+18     	; 0x210 <__floatsisf+0x12>

000001fe <__floatsisf>:
 1fe:	97 fb       	bst	r25, 7
 200:	3e f4       	brtc	.+14     	; 0x210 <__floatsisf+0x12>
 202:	90 95       	com	r25
 204:	80 95       	com	r24
 206:	70 95       	com	r23
 208:	61 95       	neg	r22
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	8f 4f       	sbci	r24, 0xFF	; 255
 20e:	9f 4f       	sbci	r25, 0xFF	; 255
 210:	99 23       	and	r25, r25
 212:	a9 f0       	breq	.+42     	; 0x23e <__floatsisf+0x40>
 214:	f9 2f       	mov	r31, r25
 216:	96 e9       	ldi	r25, 0x96	; 150
 218:	bb 27       	eor	r27, r27
 21a:	93 95       	inc	r25
 21c:	f6 95       	lsr	r31
 21e:	87 95       	ror	r24
 220:	77 95       	ror	r23
 222:	67 95       	ror	r22
 224:	b7 95       	ror	r27
 226:	f1 11       	cpse	r31, r1
 228:	f8 cf       	rjmp	.-16     	; 0x21a <__floatsisf+0x1c>
 22a:	fa f4       	brpl	.+62     	; 0x26a <__floatsisf+0x6c>
 22c:	bb 0f       	add	r27, r27
 22e:	11 f4       	brne	.+4      	; 0x234 <__floatsisf+0x36>
 230:	60 ff       	sbrs	r22, 0
 232:	1b c0       	rjmp	.+54     	; 0x26a <__floatsisf+0x6c>
 234:	6f 5f       	subi	r22, 0xFF	; 255
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	8f 4f       	sbci	r24, 0xFF	; 255
 23a:	9f 4f       	sbci	r25, 0xFF	; 255
 23c:	16 c0       	rjmp	.+44     	; 0x26a <__floatsisf+0x6c>
 23e:	88 23       	and	r24, r24
 240:	11 f0       	breq	.+4      	; 0x246 <__floatsisf+0x48>
 242:	96 e9       	ldi	r25, 0x96	; 150
 244:	11 c0       	rjmp	.+34     	; 0x268 <__floatsisf+0x6a>
 246:	77 23       	and	r23, r23
 248:	21 f0       	breq	.+8      	; 0x252 <__floatsisf+0x54>
 24a:	9e e8       	ldi	r25, 0x8E	; 142
 24c:	87 2f       	mov	r24, r23
 24e:	76 2f       	mov	r23, r22
 250:	05 c0       	rjmp	.+10     	; 0x25c <__floatsisf+0x5e>
 252:	66 23       	and	r22, r22
 254:	71 f0       	breq	.+28     	; 0x272 <__floatsisf+0x74>
 256:	96 e8       	ldi	r25, 0x86	; 134
 258:	86 2f       	mov	r24, r22
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	2a f0       	brmi	.+10     	; 0x26a <__floatsisf+0x6c>
 260:	9a 95       	dec	r25
 262:	66 0f       	add	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	88 1f       	adc	r24, r24
 268:	da f7       	brpl	.-10     	; 0x260 <__floatsisf+0x62>
 26a:	88 0f       	add	r24, r24
 26c:	96 95       	lsr	r25
 26e:	87 95       	ror	r24
 270:	97 f9       	bld	r25, 7
 272:	08 95       	ret

00000274 <__fp_split3>:
 274:	57 fd       	sbrc	r21, 7
 276:	90 58       	subi	r25, 0x80	; 128
 278:	44 0f       	add	r20, r20
 27a:	55 1f       	adc	r21, r21
 27c:	59 f0       	breq	.+22     	; 0x294 <__fp_splitA+0x10>
 27e:	5f 3f       	cpi	r21, 0xFF	; 255
 280:	71 f0       	breq	.+28     	; 0x29e <__fp_splitA+0x1a>
 282:	47 95       	ror	r20

00000284 <__fp_splitA>:
 284:	88 0f       	add	r24, r24
 286:	97 fb       	bst	r25, 7
 288:	99 1f       	adc	r25, r25
 28a:	61 f0       	breq	.+24     	; 0x2a4 <__fp_splitA+0x20>
 28c:	9f 3f       	cpi	r25, 0xFF	; 255
 28e:	79 f0       	breq	.+30     	; 0x2ae <__fp_splitA+0x2a>
 290:	87 95       	ror	r24
 292:	08 95       	ret
 294:	12 16       	cp	r1, r18
 296:	13 06       	cpc	r1, r19
 298:	14 06       	cpc	r1, r20
 29a:	55 1f       	adc	r21, r21
 29c:	f2 cf       	rjmp	.-28     	; 0x282 <__fp_split3+0xe>
 29e:	46 95       	lsr	r20
 2a0:	f1 df       	rcall	.-30     	; 0x284 <__fp_splitA>
 2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <__fp_splitA+0x30>
 2a4:	16 16       	cp	r1, r22
 2a6:	17 06       	cpc	r1, r23
 2a8:	18 06       	cpc	r1, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	f1 cf       	rjmp	.-30     	; 0x290 <__fp_splitA+0xc>
 2ae:	86 95       	lsr	r24
 2b0:	71 05       	cpc	r23, r1
 2b2:	61 05       	cpc	r22, r1
 2b4:	08 94       	sec
 2b6:	08 95       	ret

000002b8 <__fp_zero>:
 2b8:	e8 94       	clt

000002ba <__fp_szero>:
 2ba:	bb 27       	eor	r27, r27
 2bc:	66 27       	eor	r22, r22
 2be:	77 27       	eor	r23, r23
 2c0:	cb 01       	movw	r24, r22
 2c2:	97 f9       	bld	r25, 7
 2c4:	08 95       	ret

000002c6 <__mulsf3>:
 2c6:	0e 94 76 01 	call	0x2ec	; 0x2ec <__mulsf3x>
 2ca:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__fp_round>
 2ce:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fp_pscA>
 2d2:	38 f0       	brcs	.+14     	; 0x2e2 <__mulsf3+0x1c>
 2d4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__fp_pscB>
 2d8:	20 f0       	brcs	.+8      	; 0x2e2 <__mulsf3+0x1c>
 2da:	95 23       	and	r25, r21
 2dc:	11 f0       	breq	.+4      	; 0x2e2 <__mulsf3+0x1c>
 2de:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__fp_inf>
 2e2:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__fp_nan>
 2e6:	11 24       	eor	r1, r1
 2e8:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__fp_szero>

000002ec <__mulsf3x>:
 2ec:	0e 94 3a 01 	call	0x274	; 0x274 <__fp_split3>
 2f0:	70 f3       	brcs	.-36     	; 0x2ce <__mulsf3+0x8>

000002f2 <__mulsf3_pse>:
 2f2:	95 9f       	mul	r25, r21
 2f4:	c1 f3       	breq	.-16     	; 0x2e6 <__mulsf3+0x20>
 2f6:	95 0f       	add	r25, r21
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	55 1f       	adc	r21, r21
 2fc:	62 9f       	mul	r22, r18
 2fe:	f0 01       	movw	r30, r0
 300:	72 9f       	mul	r23, r18
 302:	bb 27       	eor	r27, r27
 304:	f0 0d       	add	r31, r0
 306:	b1 1d       	adc	r27, r1
 308:	63 9f       	mul	r22, r19
 30a:	aa 27       	eor	r26, r26
 30c:	f0 0d       	add	r31, r0
 30e:	b1 1d       	adc	r27, r1
 310:	aa 1f       	adc	r26, r26
 312:	64 9f       	mul	r22, r20
 314:	66 27       	eor	r22, r22
 316:	b0 0d       	add	r27, r0
 318:	a1 1d       	adc	r26, r1
 31a:	66 1f       	adc	r22, r22
 31c:	82 9f       	mul	r24, r18
 31e:	22 27       	eor	r18, r18
 320:	b0 0d       	add	r27, r0
 322:	a1 1d       	adc	r26, r1
 324:	62 1f       	adc	r22, r18
 326:	73 9f       	mul	r23, r19
 328:	b0 0d       	add	r27, r0
 32a:	a1 1d       	adc	r26, r1
 32c:	62 1f       	adc	r22, r18
 32e:	83 9f       	mul	r24, r19
 330:	a0 0d       	add	r26, r0
 332:	61 1d       	adc	r22, r1
 334:	22 1f       	adc	r18, r18
 336:	74 9f       	mul	r23, r20
 338:	33 27       	eor	r19, r19
 33a:	a0 0d       	add	r26, r0
 33c:	61 1d       	adc	r22, r1
 33e:	23 1f       	adc	r18, r19
 340:	84 9f       	mul	r24, r20
 342:	60 0d       	add	r22, r0
 344:	21 1d       	adc	r18, r1
 346:	82 2f       	mov	r24, r18
 348:	76 2f       	mov	r23, r22
 34a:	6a 2f       	mov	r22, r26
 34c:	11 24       	eor	r1, r1
 34e:	9f 57       	subi	r25, 0x7F	; 127
 350:	50 40       	sbci	r21, 0x00	; 0
 352:	9a f0       	brmi	.+38     	; 0x37a <__mulsf3_pse+0x88>
 354:	f1 f0       	breq	.+60     	; 0x392 <__mulsf3_pse+0xa0>
 356:	88 23       	and	r24, r24
 358:	4a f0       	brmi	.+18     	; 0x36c <__mulsf3_pse+0x7a>
 35a:	ee 0f       	add	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	bb 1f       	adc	r27, r27
 360:	66 1f       	adc	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	88 1f       	adc	r24, r24
 366:	91 50       	subi	r25, 0x01	; 1
 368:	50 40       	sbci	r21, 0x00	; 0
 36a:	a9 f7       	brne	.-22     	; 0x356 <__mulsf3_pse+0x64>
 36c:	9e 3f       	cpi	r25, 0xFE	; 254
 36e:	51 05       	cpc	r21, r1
 370:	80 f0       	brcs	.+32     	; 0x392 <__mulsf3_pse+0xa0>
 372:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__fp_inf>
 376:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__fp_szero>
 37a:	5f 3f       	cpi	r21, 0xFF	; 255
 37c:	e4 f3       	brlt	.-8      	; 0x376 <__mulsf3_pse+0x84>
 37e:	98 3e       	cpi	r25, 0xE8	; 232
 380:	d4 f3       	brlt	.-12     	; 0x376 <__mulsf3_pse+0x84>
 382:	86 95       	lsr	r24
 384:	77 95       	ror	r23
 386:	67 95       	ror	r22
 388:	b7 95       	ror	r27
 38a:	f7 95       	ror	r31
 38c:	e7 95       	ror	r30
 38e:	9f 5f       	subi	r25, 0xFF	; 255
 390:	c1 f7       	brne	.-16     	; 0x382 <__mulsf3_pse+0x90>
 392:	fe 2b       	or	r31, r30
 394:	88 0f       	add	r24, r24
 396:	91 1d       	adc	r25, r1
 398:	96 95       	lsr	r25
 39a:	87 95       	ror	r24
 39c:	97 f9       	bld	r25, 7
 39e:	08 95       	ret

000003a0 <__fp_inf>:
 3a0:	97 f9       	bld	r25, 7
 3a2:	9f 67       	ori	r25, 0x7F	; 127
 3a4:	80 e8       	ldi	r24, 0x80	; 128
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	08 95       	ret

000003ac <__fp_nan>:
 3ac:	9f ef       	ldi	r25, 0xFF	; 255
 3ae:	80 ec       	ldi	r24, 0xC0	; 192
 3b0:	08 95       	ret

000003b2 <__fp_pscA>:
 3b2:	00 24       	eor	r0, r0
 3b4:	0a 94       	dec	r0
 3b6:	16 16       	cp	r1, r22
 3b8:	17 06       	cpc	r1, r23
 3ba:	18 06       	cpc	r1, r24
 3bc:	09 06       	cpc	r0, r25
 3be:	08 95       	ret

000003c0 <__fp_pscB>:
 3c0:	00 24       	eor	r0, r0
 3c2:	0a 94       	dec	r0
 3c4:	12 16       	cp	r1, r18
 3c6:	13 06       	cpc	r1, r19
 3c8:	14 06       	cpc	r1, r20
 3ca:	05 06       	cpc	r0, r21
 3cc:	08 95       	ret

000003ce <__fp_round>:
 3ce:	09 2e       	mov	r0, r25
 3d0:	03 94       	inc	r0
 3d2:	00 0c       	add	r0, r0
 3d4:	11 f4       	brne	.+4      	; 0x3da <__fp_round+0xc>
 3d6:	88 23       	and	r24, r24
 3d8:	52 f0       	brmi	.+20     	; 0x3ee <__fp_round+0x20>
 3da:	bb 0f       	add	r27, r27
 3dc:	40 f4       	brcc	.+16     	; 0x3ee <__fp_round+0x20>
 3de:	bf 2b       	or	r27, r31
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <__fp_round+0x18>
 3e2:	60 ff       	sbrs	r22, 0
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <__fp_round+0x20>
 3e6:	6f 5f       	subi	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	8f 4f       	sbci	r24, 0xFF	; 255
 3ec:	9f 4f       	sbci	r25, 0xFF	; 255
 3ee:	08 95       	ret

000003f0 <_exit>:
 3f0:	f8 94       	cli

000003f2 <__stop_program>:
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <__stop_program>
