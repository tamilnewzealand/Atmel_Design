
Group16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000020f  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000016a  00000000  00000000  00000467  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000015e  00000000  00000000  000005d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e0  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ba  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  8e:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_init>:
#include <util/delay.h>

void uart_init(uint8_t myboard)
{
	// Set baud rate using register UBRR0H and UBRR0L
	UBRR0H =  0; //(unsigned char) (myboard>>8);
  96:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 103; //(unsigned char) myboard;
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	80 93 c4 00 	sts	0x00C4, r24
	
	// Set frame format:
	// 8 bit data format, 1 stop bit, no parity bit
	UCSR0B|= (1<<TXEN0);				//enable transmitter
  a0:	e1 ec       	ldi	r30, 0xC1	; 193
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	80 83       	st	Z, r24
	UCSR0C|= (1<<UCSZ00)|(1<<UCSZ01);	//8 bit data format
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <uart_transmit>:
{
	
	// Wait for empty transmit buffer
	// Put data into buffer, sends the data
	
	while (!((1<<UDRE0) && UCSR0A));
  b6:	e0 ec       	ldi	r30, 0xC0	; 192
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	99 23       	and	r25, r25
  be:	e9 f3       	breq	.-6      	; 0xba <uart_transmit+0x4>
		UDR0 = data;	
  c0:	80 93 c6 00 	sts	0x00C6, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	80 e7       	ldi	r24, 0x70	; 112
  c8:	92 e0       	ldi	r25, 0x02	; 2
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <uart_transmit+0x14>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <uart_transmit+0x1e>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <main>:


/* declare global variables here*/

int main( void )
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	2a 97       	sbiw	r28, 0x0a	; 10
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
	uint8_t array[10] = {12,15,67,89,72,34,49,59,61,52};
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	e0 e0       	ldi	r30, 0x00	; 0
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	de 01       	movw	r26, r28
  f4:	11 96       	adiw	r26, 0x01	; 1
  f6:	01 90       	ld	r0, Z+
  f8:	0d 92       	st	X+, r0
  fa:	8a 95       	dec	r24
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x1e>
	
	uart_init(MYUBRR);
  fe:	87 e6       	ldi	r24, 0x67	; 103
 100:	0e 94 4b 00 	call	0x96	; 0x96 <uart_init>
 104:	7e 01       	movw	r14, r28
 106:	2b e0       	ldi	r18, 0x0B	; 11
 108:	e2 0e       	add	r14, r18
 10a:	f1 1c       	adc	r15, r1
 10c:	8e 01       	movw	r16, r28
 10e:	0f 5f       	subi	r16, 0xFF	; 255
 110:	1f 4f       	sbci	r17, 0xFF	; 255
	while (1){
		//read array
		for(uint8_t i=0;i<10;i++) {
			uint8_t variable = array[i];
			uart_transmit(variable);
 112:	f8 01       	movw	r30, r16
 114:	81 91       	ld	r24, Z+
 116:	8f 01       	movw	r16, r30
 118:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_transmit>
 11c:	ff ef       	ldi	r31, 0xFF	; 255
 11e:	29 e6       	ldi	r18, 0x69	; 105
 120:	88 e1       	ldi	r24, 0x18	; 24
 122:	f1 50       	subi	r31, 0x01	; 1
 124:	20 40       	sbci	r18, 0x00	; 0
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x4a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x54>
 12c:	00 00       	nop
	uint8_t array[10] = {12,15,67,89,72,34,49,59,61,52};
	
	uart_init(MYUBRR);
	while (1){
		//read array
		for(uint8_t i=0;i<10;i++) {
 12e:	0e 15       	cp	r16, r14
 130:	1f 05       	cpc	r17, r15
 132:	79 f7       	brne	.-34     	; 0x112 <main+0x3a>
 134:	eb cf       	rjmp	.-42     	; 0x10c <main+0x34>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
