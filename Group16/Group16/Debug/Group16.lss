
Group16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001ba  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015a  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000015c  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d8  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007b  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000090b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <uart_init>:
#include <util/delay.h>

void uart_init(/*uint8_t myboard*/)
{
	// Set baud rate using register UBRR0H and UBRR0L
	UBRR0H =  0; //(unsigned char) (myboard>>8);
  80:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 103; //(unsigned char) myboard;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24
	
	// Set frame format:
	// 8 bit data format, 1 stop bit, no parity bit
	UCSR0B|= (1<<TXEN0);				//enable transmitter
  8a:	e1 ec       	ldi	r30, 0xC1	; 193
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 60       	ori	r24, 0x08	; 8
  92:	80 83       	st	Z, r24
	UCSR0C|= (1<<UCSZ00)|(1<<UCSZ01);	//8 bit data format
  94:	e2 ec       	ldi	r30, 0xC2	; 194
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	86 60       	ori	r24, 0x06	; 6
  9c:	80 83       	st	Z, r24
  9e:	08 95       	ret

000000a0 <uart_transmit>:
void uart_transmit(uint8_t data )
{
	
	// Wait for empty transmit buffer
	// Put data into buffer, sends the data
	while (!((1<<UDRE0) && UCSR0A));	//Check if USART Data Register is Empty (1=yes) AND if USART Control and Status Register A is not 0 (then => 1), reverse the result and break out of the loop.
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	99 23       	and	r25, r25
  a8:	e9 f3       	breq	.-6      	; 0xa4 <uart_transmit+0x4>
		UDR0 = data;	//Transfers the data to the UDR (USART data register)
  aa:	80 93 c6 00 	sts	0x00C6, r24
  ae:	08 95       	ret

000000b0 <main>:


/* declare global variables here*/

int main(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	00 d0       	rcall	.+0      	; 0xb6 <main+0x6>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <main+0x8>
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	//correctly input it in array (watch out for position)
	
	
	
	
	uint8_t array[4] = {102,71,40,9};
  bc:	86 e6       	ldi	r24, 0x66	; 102
  be:	89 83       	std	Y+1, r24	; 0x01
  c0:	87 e4       	ldi	r24, 0x47	; 71
  c2:	8a 83       	std	Y+2, r24	; 0x02
  c4:	88 e2       	ldi	r24, 0x28	; 40
  c6:	8b 83       	std	Y+3, r24	; 0x03
  c8:	89 e0       	ldi	r24, 0x09	; 9
  ca:	8c 83       	std	Y+4, r24	; 0x04
	//0d102 == 0110 0110
	//0d71  == 0100 0111
	//0d40  == 0010 1000
	//0d9   == 0000 1001
	
	uart_init(/*MYUBRR*/);
  cc:	0e 94 40 00 	call	0x80	; 0x80 <uart_init>
  d0:	7e 01       	movw	r14, r28
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	e8 0e       	add	r14, r24
  d6:	f1 1c       	adc	r15, r1
  d8:	8e 01       	movw	r16, r28
  da:	0f 5f       	subi	r16, 0xFF	; 255
  dc:	1f 4f       	sbci	r17, 0xFF	; 255
	while (1){
		//read array
		for(uint8_t i=0;i<4;i++) {
			uint8_t variable = array[i];
			uart_transmit(variable);
  de:	f8 01       	movw	r30, r16
  e0:	81 91       	ld	r24, Z+
  e2:	8f 01       	movw	r16, r30
  e4:	0e 94 50 00 	call	0xa0	; 0xa0 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	8a e1       	ldi	r24, 0x1A	; 26
  ea:	91 e4       	ldi	r25, 0x41	; 65
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x3c>
  f0:	00 00       	nop
	//0d9   == 0000 1001
	
	uart_init(/*MYUBRR*/);
	while (1){
		//read array
		for(uint8_t i=0;i<4;i++) {
  f2:	0e 15       	cp	r16, r14
  f4:	1f 05       	cpc	r17, r15
  f6:	99 f7       	brne	.-26     	; 0xde <main+0x2e>
  f8:	ef cf       	rjmp	.-34     	; 0xd8 <main+0x28>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
