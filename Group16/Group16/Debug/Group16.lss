
Group16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000134  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000017e  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e1  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000f7  00000000  00000000  000004b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019a  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000159  00000000  00000000  0000079a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000008f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  8e:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_init>:
 */ 

void uart_init(uint8_t myboard)
{
	// Set baud rate using register UBRR0H and UBRR0L
	UBRR0H =  (unsigned char) (myboard>>8);
  96:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) myboard;
  9a:	80 93 c4 00 	sts	0x00C4, r24
	
	// Set frame format:
	// 8 bit data format, 1 stop bit, no parity bit
	UCSR0B|= (1<<TXEN0);				//enable transmitter
  9e:	e1 ec       	ldi	r30, 0xC1	; 193
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	80 83       	st	Z, r24
	UCSR0C|= (1<<UCSZ00)|(1<<UCSZ01);	//8 bit data format
  a8:	e2 ec       	ldi	r30, 0xC2	; 194
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	86 60       	ori	r24, 0x06	; 6
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <uart_transmit>:
{
	
	// Wait for empty transmit buffer
	// Put data into buffer, sends the data
	
	while (!((1<<UDRE0) && UCSR0A));
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	e9 f3       	breq	.-6      	; 0xb8 <uart_transmit+0x4>
		UDR0 = data;	
  be:	80 93 c6 00 	sts	0x00C6, r24
  c2:	08 95       	ret

000000c4 <main>:


/* declare global variables here*/

int main( void )
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	2a 97       	sbiw	r28, 0x0a	; 10
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
	uart_init(MYUBRR);
  d8:	87 e6       	ldi	r24, 0x67	; 103
  da:	0e 94 4b 00 	call	0x96	; 0x96 <uart_init>
	uint8_t TXBUF[] = {17, 23, 29, 37, 43, 53, 59, 67, 83, 97};
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	e0 e0       	ldi	r30, 0x00	; 0
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	8a 95       	dec	r24
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x24>
	uint8_t txindex = 0;
  f0:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t data;
	uint8_t digit;
	while (1){
		//read array
		data = TXBUF[txindex];
		digit = data % 10;
  f2:	0f 2e       	mov	r0, r31
  f4:	fd ec       	ldi	r31, 0xCD	; 205
  f6:	ff 2e       	mov	r15, r31
  f8:	f0 2d       	mov	r31, r0
	uint8_t txindex = 0;
	uint8_t data;
	uint8_t digit;
	while (1){
		//read array
		data = TXBUF[txindex];
  fa:	e1 e0       	ldi	r30, 0x01	; 1
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	ec 0f       	add	r30, r28
 100:	fd 1f       	adc	r31, r29
 102:	e0 0f       	add	r30, r16
 104:	f1 1d       	adc	r31, r1
 106:	80 81       	ld	r24, Z
		digit = data % 10;
 108:	8f 9d       	mul	r24, r15
 10a:	11 2d       	mov	r17, r1
 10c:	11 24       	eor	r1, r1
 10e:	16 95       	lsr	r17
 110:	16 95       	lsr	r17
 112:	16 95       	lsr	r17
 114:	21 2f       	mov	r18, r17
 116:	22 0f       	add	r18, r18
 118:	92 2f       	mov	r25, r18
 11a:	99 0f       	add	r25, r25
 11c:	99 0f       	add	r25, r25
 11e:	92 0f       	add	r25, r18
		uart_transmit(digit);
 120:	89 1b       	sub	r24, r25
 122:	0e 94 5a 00 	call	0xb4	; 0xb4 <uart_transmit>
		digit = data / 10;
		uart_transmit(digit);
 126:	81 2f       	mov	r24, r17
 128:	0e 94 5a 00 	call	0xb4	; 0xb4 <uart_transmit>
		txindex++;
 12c:	0f 5f       	subi	r16, 0xFF	; 255
	//	printf(data);
	}
 12e:	e5 cf       	rjmp	.-54     	; 0xfa <main+0x36>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
