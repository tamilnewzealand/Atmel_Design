
Adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000792  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000071e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  00800100  00800100  00000792  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000792  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000067b  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003be  00000000  00000000  00000f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ff  00000000  00000000  000012e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  000016e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000268  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000584  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  88:	0c 94 8d 03 	jmp	0x71a	; 0x71a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <InitADC>:

#include "adc.h"

void InitADC() {
	// Select Vref to internal AREF
	ADMUX |= (1<<REFS0);
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN)|(1<<ADIE);
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	8f 68       	ori	r24, 0x8F	; 143
  a2:	80 83       	st	Z, r24
	
	isr_chan = V_Filter;
  a4:	85 e0       	ldi	r24, 0x05	; 5
  a6:	80 93 00 01 	sts	0x0100, r24
	count = 0;
  aa:	10 92 81 01 	sts	0x0181, r1
	
	sei();
  ae:	78 94       	sei
  b0:	08 95       	ret

000000b2 <__vector_21>:
}

ISR(ADC_vect) {
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	if (isr_chan == V_Filter) {
  c4:	80 91 00 01 	lds	r24, 0x0100
  c8:	85 30       	cpi	r24, 0x05	; 5
  ca:	89 f4       	brne	.+34     	; 0xee <__vector_21+0x3c>
		adc_vol_result[count] = ADC;
  cc:	e0 91 81 01 	lds	r30, 0x0181
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 91 78 00 	lds	r24, 0x0078
  d6:	90 91 79 00 	lds	r25, 0x0079
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	ee 57       	subi	r30, 0x7E	; 126
  e0:	fe 4f       	sbci	r31, 0xFE	; 254
  e2:	91 83       	std	Z+1, r25	; 0x01
  e4:	80 83       	st	Z, r24
		isr_chan = I_Filter;
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	80 93 00 01 	sts	0x0100, r24
  ec:	14 c0       	rjmp	.+40     	; 0x116 <__vector_21+0x64>
		} else if (isr_chan == I_Filter) {
  ee:	80 91 00 01 	lds	r24, 0x0100
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	81 f4       	brne	.+32     	; 0x116 <__vector_21+0x64>
		adc_amp_result[count] = ADC;
  f6:	e0 91 81 01 	lds	r30, 0x0181
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 91 78 00 	lds	r24, 0x0078
 100:	90 91 79 00 	lds	r25, 0x0079
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	ef 5f       	subi	r30, 0xFF	; 255
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	91 83       	std	Z+1, r25	; 0x01
 10e:	80 83       	st	Z, r24
		isr_chan = V_Filter;
 110:	85 e0       	ldi	r24, 0x05	; 5
 112:	80 93 00 01 	sts	0x0100, r24
	}
	
	count++;
 116:	80 91 81 01 	lds	r24, 0x0181
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 81 01 	sts	0x0181, r24
	ADMUX = (ADMUX & 0xF0) | (isr_chan & 0x0F);
 120:	ec e7       	ldi	r30, 0x7C	; 124
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	90 91 00 01 	lds	r25, 0x0100
 12a:	9f 70       	andi	r25, 0x0F	; 15
 12c:	80 7f       	andi	r24, 0xF0	; 240
 12e:	89 2b       	or	r24, r25
 130:	80 83       	st	Z, r24
	
	if (count == 63) count = 0;
 132:	80 91 81 01 	lds	r24, 0x0181
 136:	8f 33       	cpi	r24, 0x3F	; 63
 138:	11 f4       	brne	.+4      	; 0x13e <__vector_21+0x8c>
 13a:	10 92 81 01 	sts	0x0181, r1

	// Start the next conversion.
	ADCSRA |= (1<<ADSC);
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 64       	ori	r24, 0x40	; 64
 146:	80 83       	st	Z, r24
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <CalcPeak>:
	value = sqrt(value);
	value /= 8;
	return value;
}

double CalcPeak() {
 15a:	8f 92       	push	r8
 15c:	9f 92       	push	r9
 15e:	af 92       	push	r10
 160:	bf 92       	push	r11
 162:	cf 92       	push	r12
 164:	df 92       	push	r13
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	c0 e0       	ldi	r28, 0x00	; 0
 174:	d0 e0       	ldi	r29, 0x00	; 0
	double value = 0x00000000;
 176:	c1 2c       	mov	r12, r1
 178:	d1 2c       	mov	r13, r1
 17a:	76 01       	movw	r14, r12
	uint8_t i;
	for (i = 0; i < 63; i++) {
		value += (double)adc_amp_result[i] * (double)adc_amp_result[i];
 17c:	fe 01       	movw	r30, r28
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	ef 5f       	subi	r30, 0xFF	; 255
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	60 81       	ld	r22, Z
 188:	71 81       	ldd	r23, Z+1	; 0x01
 18a:	00 81       	ld	r16, Z
 18c:	11 81       	ldd	r17, Z+1	; 0x01
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 37 02 	call	0x46e	; 0x46e <__floatunsisf>
 196:	4b 01       	movw	r8, r22
 198:	5c 01       	movw	r10, r24
 19a:	b8 01       	movw	r22, r16
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 37 02 	call	0x46e	; 0x46e <__floatunsisf>
 1a4:	9b 01       	movw	r18, r22
 1a6:	ac 01       	movw	r20, r24
 1a8:	c5 01       	movw	r24, r10
 1aa:	b4 01       	movw	r22, r8
 1ac:	0e 94 c5 02 	call	0x58a	; 0x58a <__mulsf3>
 1b0:	9b 01       	movw	r18, r22
 1b2:	ac 01       	movw	r20, r24
 1b4:	c7 01       	movw	r24, r14
 1b6:	b6 01       	movw	r22, r12
 1b8:	0e 94 9c 01 	call	0x338	; 0x338 <__addsf3>
 1bc:	6b 01       	movw	r12, r22
 1be:	7c 01       	movw	r14, r24
 1c0:	21 96       	adiw	r28, 0x01	; 1
}

double CalcPeak() {
	double value = 0x00000000;
	uint8_t i;
	for (i = 0; i < 63; i++) {
 1c2:	cf 33       	cpi	r28, 0x3F	; 63
 1c4:	d1 05       	cpc	r29, r1
 1c6:	d1 f6       	brne	.-76     	; 0x17c <CalcPeak+0x22>
		value += (double)adc_amp_result[i] * (double)adc_amp_result[i];
	}
	value = sqrt(value);
 1c8:	0e 94 38 03 	call	0x670	; 0x670 <sqrt>
	value /= 8;
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	5e e3       	ldi	r21, 0x3E	; 62
 1d4:	0e 94 c5 02 	call	0x58a	; 0x58a <__mulsf3>
	value *= sqrt(2);
 1d8:	23 ef       	ldi	r18, 0xF3	; 243
 1da:	34 e0       	ldi	r19, 0x04	; 4
 1dc:	45 eb       	ldi	r20, 0xB5	; 181
 1de:	5f e3       	ldi	r21, 0x3F	; 63
 1e0:	0e 94 c5 02 	call	0x58a	; 0x58a <__mulsf3>
	return value;
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	bf 90       	pop	r11
 1f6:	af 90       	pop	r10
 1f8:	9f 90       	pop	r9
 1fa:	8f 90       	pop	r8
 1fc:	08 95       	ret

000001fe <main>:
	
int main(void) {
	uint8_t i;
	double value;
	uint8_t temp;
	InitADC();	
 1fe:	0e 94 48 00 	call	0x90	; 0x90 <InitADC>
	USART0Init();
 202:	0e 94 15 01 	call	0x22a	; 0x22a <USART0Init>
	while(1) {
		value = CalcPeak(adc_amp_result);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 ad 00 	call	0x15a	; 0x15a <CalcPeak>
 20e:	6b 01       	movw	r12, r22
 210:	7c 01       	movw	r14, r24
		for (i = 0; i < 599; i++) {
			USART0TransmitNumber(value, 0);
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	c7 01       	movw	r24, r14
 216:	b6 01       	movw	r22, r12
 218:	0e 94 2f 01 	call	0x25e	; 0x25e <USART0TransmitNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	8f e1       	ldi	r24, 0x1F	; 31
 21e:	9e e4       	ldi	r25, 0x4E	; 78
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0x22>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x28>
 226:	00 00       	nop
 228:	f4 cf       	rjmp	.-24     	; 0x212 <main+0x14>

0000022a <USART0Init>:

#include "usart.h"

void USART0Init(void) {
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
 22a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)UBRR_VALUE;
 22e:	87 e6       	ldi	r24, 0x67	; 103
 230:	80 93 c4 00 	sts	0x00C4, r24
	
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 234:	e2 ec       	ldi	r30, 0xC2	; 194
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	86 60       	ori	r24, 0x06	; 6
 23c:	80 83       	st	Z, r24
	
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 23e:	e1 ec       	ldi	r30, 0xC1	; 193
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	88 61       	ori	r24, 0x18	; 24
 246:	80 83       	st	Z, r24
 248:	08 95       	ret

0000024a <USART0SendByte>:
}

int USART0SendByte(uint8_t data) {
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
 24a:	e0 ec       	ldi	r30, 0xC0	; 192
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	90 81       	ld	r25, Z
 250:	95 ff       	sbrs	r25, 5
 252:	fd cf       	rjmp	.-6      	; 0x24e <USART0SendByte+0x4>
	
	// Transmit data
	UDR0 = data;
 254:	80 93 c6 00 	sts	0x00C6, r24
	return 0;
}
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	08 95       	ret

0000025e <USART0TransmitNumber>:

void USART0TransmitNumber(double value, uint8_t type) {
 25e:	cf 92       	push	r12
 260:	df 92       	push	r13
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	6b 01       	movw	r12, r22
 26c:	7c 01       	movw	r14, r24
 26e:	d4 2f       	mov	r29, r20
	uint8_t digit;
	digit = (uint8_t)value % 10;
 270:	0e 94 08 02 	call	0x410	; 0x410 <__fixunssfsi>
 274:	cd ec       	ldi	r28, 0xCD	; 205
 276:	6c 9f       	mul	r22, r28
 278:	81 2d       	mov	r24, r1
 27a:	11 24       	eor	r1, r1
 27c:	86 95       	lsr	r24
 27e:	86 95       	lsr	r24
 280:	86 95       	lsr	r24
 282:	88 0f       	add	r24, r24
 284:	98 2f       	mov	r25, r24
 286:	99 0f       	add	r25, r25
 288:	99 0f       	add	r25, r25
 28a:	89 0f       	add	r24, r25
 28c:	68 1b       	sub	r22, r24
 28e:	86 2f       	mov	r24, r22
	digit |= (1 << 6);
	digit |= (1 << 5);
	digit |= (1 << 4);
	USART0SendByte(digit);
 290:	80 67       	ori	r24, 0x70	; 112
 292:	0e 94 25 01 	call	0x24a	; 0x24a <USART0SendByte>
	
	value *= 10;
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	40 e2       	ldi	r20, 0x20	; 32
 29c:	51 e4       	ldi	r21, 0x41	; 65
 29e:	c7 01       	movw	r24, r14
 2a0:	b6 01       	movw	r22, r12
 2a2:	0e 94 c5 02 	call	0x58a	; 0x58a <__mulsf3>
 2a6:	6b 01       	movw	r12, r22
 2a8:	7c 01       	movw	r14, r24
	digit = (uint8_t)value % 10;
 2aa:	0e 94 08 02 	call	0x410	; 0x410 <__fixunssfsi>
 2ae:	6c 9f       	mul	r22, r28
 2b0:	91 2d       	mov	r25, r1
 2b2:	11 24       	eor	r1, r1
 2b4:	96 95       	lsr	r25
 2b6:	96 95       	lsr	r25
 2b8:	96 95       	lsr	r25
 2ba:	99 0f       	add	r25, r25
 2bc:	29 2f       	mov	r18, r25
 2be:	22 0f       	add	r18, r18
 2c0:	22 0f       	add	r18, r18
 2c2:	92 0f       	add	r25, r18
 2c4:	86 2f       	mov	r24, r22
 2c6:	89 1b       	sub	r24, r25
	digit |= (1 << 6);
	digit &=~ (1 << 5);
	digit &=~ (1 << 4);
 2c8:	8f 7c       	andi	r24, 0xCF	; 207
	USART0SendByte(digit);
 2ca:	80 64       	ori	r24, 0x40	; 64
 2cc:	0e 94 25 01 	call	0x24a	; 0x24a <USART0SendByte>
	
	value *= 10;
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	40 e2       	ldi	r20, 0x20	; 32
 2d6:	51 e4       	ldi	r21, 0x41	; 65
 2d8:	c7 01       	movw	r24, r14
 2da:	b6 01       	movw	r22, r12
 2dc:	0e 94 c5 02 	call	0x58a	; 0x58a <__mulsf3>
	digit = (uint8_t)value % 10;
 2e0:	0e 94 08 02 	call	0x410	; 0x410 <__fixunssfsi>
 2e4:	6c 9f       	mul	r22, r28
 2e6:	c1 2d       	mov	r28, r1
 2e8:	11 24       	eor	r1, r1
 2ea:	c6 95       	lsr	r28
 2ec:	c6 95       	lsr	r28
 2ee:	c6 95       	lsr	r28
 2f0:	cc 0f       	add	r28, r28
 2f2:	8c 2f       	mov	r24, r28
 2f4:	88 0f       	add	r24, r24
 2f6:	88 0f       	add	r24, r24
 2f8:	c8 0f       	add	r28, r24
 2fa:	6c 1b       	sub	r22, r28
	digit &=~ (1 << 6);
	digit |= (1 << 5);
	digit &=~ (1 << 4);
 2fc:	86 2f       	mov	r24, r22
 2fe:	8f 7a       	andi	r24, 0xAF	; 175
	USART0SendByte(digit);
 300:	80 62       	ori	r24, 0x20	; 32
 302:	0e 94 25 01 	call	0x24a	; 0x24a <USART0SendByte>
	
	if (type == 0) USART0SendByte(0x0A);
 306:	d1 11       	cpse	r29, r1
 308:	04 c0       	rjmp	.+8      	; 0x312 <USART0TransmitNumber+0xb4>
 30a:	8a e0       	ldi	r24, 0x0A	; 10
 30c:	0e 94 25 01 	call	0x24a	; 0x24a <USART0SendByte>
 310:	0b c0       	rjmp	.+22     	; 0x328 <USART0TransmitNumber+0xca>
	if (type == 1) USART0SendByte(0x0B);
 312:	d1 30       	cpi	r29, 0x01	; 1
 314:	21 f4       	brne	.+8      	; 0x31e <USART0TransmitNumber+0xc0>
 316:	8b e0       	ldi	r24, 0x0B	; 11
 318:	0e 94 25 01 	call	0x24a	; 0x24a <USART0SendByte>
 31c:	05 c0       	rjmp	.+10     	; 0x328 <USART0TransmitNumber+0xca>
	if (type == 2) USART0SendByte(0x0C);
 31e:	d2 30       	cpi	r29, 0x02	; 2
 320:	19 f4       	brne	.+6      	; 0x328 <USART0TransmitNumber+0xca>
 322:	8c e0       	ldi	r24, 0x0C	; 12
 324:	0e 94 25 01 	call	0x24a	; 0x24a <USART0SendByte>
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	df 90       	pop	r13
 332:	cf 90       	pop	r12
 334:	08 95       	ret

00000336 <__subsf3>:
 336:	50 58       	subi	r21, 0x80	; 128

00000338 <__addsf3>:
 338:	bb 27       	eor	r27, r27
 33a:	aa 27       	eor	r26, r26
 33c:	0e 94 b3 01 	call	0x366	; 0x366 <__addsf3x>
 340:	0c 94 8b 02 	jmp	0x516	; 0x516 <__fp_round>
 344:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fp_pscA>
 348:	38 f0       	brcs	.+14     	; 0x358 <__addsf3+0x20>
 34a:	0e 94 84 02 	call	0x508	; 0x508 <__fp_pscB>
 34e:	20 f0       	brcs	.+8      	; 0x358 <__addsf3+0x20>
 350:	39 f4       	brne	.+14     	; 0x360 <__addsf3+0x28>
 352:	9f 3f       	cpi	r25, 0xFF	; 255
 354:	19 f4       	brne	.+6      	; 0x35c <__addsf3+0x24>
 356:	26 f4       	brtc	.+8      	; 0x360 <__addsf3+0x28>
 358:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__fp_nan>
 35c:	0e f4       	brtc	.+2      	; 0x360 <__addsf3+0x28>
 35e:	e0 95       	com	r30
 360:	e7 fb       	bst	r30, 7
 362:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_inf>

00000366 <__addsf3x>:
 366:	e9 2f       	mov	r30, r25
 368:	0e 94 9c 02 	call	0x538	; 0x538 <__fp_split3>
 36c:	58 f3       	brcs	.-42     	; 0x344 <__addsf3+0xc>
 36e:	ba 17       	cp	r27, r26
 370:	62 07       	cpc	r22, r18
 372:	73 07       	cpc	r23, r19
 374:	84 07       	cpc	r24, r20
 376:	95 07       	cpc	r25, r21
 378:	20 f0       	brcs	.+8      	; 0x382 <__addsf3x+0x1c>
 37a:	79 f4       	brne	.+30     	; 0x39a <__addsf3x+0x34>
 37c:	a6 f5       	brtc	.+104    	; 0x3e6 <__addsf3x+0x80>
 37e:	0c 94 be 02 	jmp	0x57c	; 0x57c <__fp_zero>
 382:	0e f4       	brtc	.+2      	; 0x386 <__addsf3x+0x20>
 384:	e0 95       	com	r30
 386:	0b 2e       	mov	r0, r27
 388:	ba 2f       	mov	r27, r26
 38a:	a0 2d       	mov	r26, r0
 38c:	0b 01       	movw	r0, r22
 38e:	b9 01       	movw	r22, r18
 390:	90 01       	movw	r18, r0
 392:	0c 01       	movw	r0, r24
 394:	ca 01       	movw	r24, r20
 396:	a0 01       	movw	r20, r0
 398:	11 24       	eor	r1, r1
 39a:	ff 27       	eor	r31, r31
 39c:	59 1b       	sub	r21, r25
 39e:	99 f0       	breq	.+38     	; 0x3c6 <__addsf3x+0x60>
 3a0:	59 3f       	cpi	r21, 0xF9	; 249
 3a2:	50 f4       	brcc	.+20     	; 0x3b8 <__addsf3x+0x52>
 3a4:	50 3e       	cpi	r21, 0xE0	; 224
 3a6:	68 f1       	brcs	.+90     	; 0x402 <__addsf3x+0x9c>
 3a8:	1a 16       	cp	r1, r26
 3aa:	f0 40       	sbci	r31, 0x00	; 0
 3ac:	a2 2f       	mov	r26, r18
 3ae:	23 2f       	mov	r18, r19
 3b0:	34 2f       	mov	r19, r20
 3b2:	44 27       	eor	r20, r20
 3b4:	58 5f       	subi	r21, 0xF8	; 248
 3b6:	f3 cf       	rjmp	.-26     	; 0x39e <__addsf3x+0x38>
 3b8:	46 95       	lsr	r20
 3ba:	37 95       	ror	r19
 3bc:	27 95       	ror	r18
 3be:	a7 95       	ror	r26
 3c0:	f0 40       	sbci	r31, 0x00	; 0
 3c2:	53 95       	inc	r21
 3c4:	c9 f7       	brne	.-14     	; 0x3b8 <__addsf3x+0x52>
 3c6:	7e f4       	brtc	.+30     	; 0x3e6 <__addsf3x+0x80>
 3c8:	1f 16       	cp	r1, r31
 3ca:	ba 0b       	sbc	r27, r26
 3cc:	62 0b       	sbc	r22, r18
 3ce:	73 0b       	sbc	r23, r19
 3d0:	84 0b       	sbc	r24, r20
 3d2:	ba f0       	brmi	.+46     	; 0x402 <__addsf3x+0x9c>
 3d4:	91 50       	subi	r25, 0x01	; 1
 3d6:	a1 f0       	breq	.+40     	; 0x400 <__addsf3x+0x9a>
 3d8:	ff 0f       	add	r31, r31
 3da:	bb 1f       	adc	r27, r27
 3dc:	66 1f       	adc	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	88 1f       	adc	r24, r24
 3e2:	c2 f7       	brpl	.-16     	; 0x3d4 <__addsf3x+0x6e>
 3e4:	0e c0       	rjmp	.+28     	; 0x402 <__addsf3x+0x9c>
 3e6:	ba 0f       	add	r27, r26
 3e8:	62 1f       	adc	r22, r18
 3ea:	73 1f       	adc	r23, r19
 3ec:	84 1f       	adc	r24, r20
 3ee:	48 f4       	brcc	.+18     	; 0x402 <__addsf3x+0x9c>
 3f0:	87 95       	ror	r24
 3f2:	77 95       	ror	r23
 3f4:	67 95       	ror	r22
 3f6:	b7 95       	ror	r27
 3f8:	f7 95       	ror	r31
 3fa:	9e 3f       	cpi	r25, 0xFE	; 254
 3fc:	08 f0       	brcs	.+2      	; 0x400 <__addsf3x+0x9a>
 3fe:	b0 cf       	rjmp	.-160    	; 0x360 <__addsf3+0x28>
 400:	93 95       	inc	r25
 402:	88 0f       	add	r24, r24
 404:	08 f0       	brcs	.+2      	; 0x408 <__addsf3x+0xa2>
 406:	99 27       	eor	r25, r25
 408:	ee 0f       	add	r30, r30
 40a:	97 95       	ror	r25
 40c:	87 95       	ror	r24
 40e:	08 95       	ret

00000410 <__fixunssfsi>:
 410:	0e 94 a4 02 	call	0x548	; 0x548 <__fp_splitA>
 414:	88 f0       	brcs	.+34     	; 0x438 <__fixunssfsi+0x28>
 416:	9f 57       	subi	r25, 0x7F	; 127
 418:	98 f0       	brcs	.+38     	; 0x440 <__fixunssfsi+0x30>
 41a:	b9 2f       	mov	r27, r25
 41c:	99 27       	eor	r25, r25
 41e:	b7 51       	subi	r27, 0x17	; 23
 420:	b0 f0       	brcs	.+44     	; 0x44e <__fixunssfsi+0x3e>
 422:	e1 f0       	breq	.+56     	; 0x45c <__fixunssfsi+0x4c>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	88 1f       	adc	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	1a f0       	brmi	.+6      	; 0x434 <__fixunssfsi+0x24>
 42e:	ba 95       	dec	r27
 430:	c9 f7       	brne	.-14     	; 0x424 <__fixunssfsi+0x14>
 432:	14 c0       	rjmp	.+40     	; 0x45c <__fixunssfsi+0x4c>
 434:	b1 30       	cpi	r27, 0x01	; 1
 436:	91 f0       	breq	.+36     	; 0x45c <__fixunssfsi+0x4c>
 438:	0e 94 be 02 	call	0x57c	; 0x57c <__fp_zero>
 43c:	b1 e0       	ldi	r27, 0x01	; 1
 43e:	08 95       	ret
 440:	0c 94 be 02 	jmp	0x57c	; 0x57c <__fp_zero>
 444:	67 2f       	mov	r22, r23
 446:	78 2f       	mov	r23, r24
 448:	88 27       	eor	r24, r24
 44a:	b8 5f       	subi	r27, 0xF8	; 248
 44c:	39 f0       	breq	.+14     	; 0x45c <__fixunssfsi+0x4c>
 44e:	b9 3f       	cpi	r27, 0xF9	; 249
 450:	cc f3       	brlt	.-14     	; 0x444 <__fixunssfsi+0x34>
 452:	86 95       	lsr	r24
 454:	77 95       	ror	r23
 456:	67 95       	ror	r22
 458:	b3 95       	inc	r27
 45a:	d9 f7       	brne	.-10     	; 0x452 <__fixunssfsi+0x42>
 45c:	3e f4       	brtc	.+14     	; 0x46c <__fixunssfsi+0x5c>
 45e:	90 95       	com	r25
 460:	80 95       	com	r24
 462:	70 95       	com	r23
 464:	61 95       	neg	r22
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	8f 4f       	sbci	r24, 0xFF	; 255
 46a:	9f 4f       	sbci	r25, 0xFF	; 255
 46c:	08 95       	ret

0000046e <__floatunsisf>:
 46e:	e8 94       	clt
 470:	09 c0       	rjmp	.+18     	; 0x484 <__floatsisf+0x12>

00000472 <__floatsisf>:
 472:	97 fb       	bst	r25, 7
 474:	3e f4       	brtc	.+14     	; 0x484 <__floatsisf+0x12>
 476:	90 95       	com	r25
 478:	80 95       	com	r24
 47a:	70 95       	com	r23
 47c:	61 95       	neg	r22
 47e:	7f 4f       	sbci	r23, 0xFF	; 255
 480:	8f 4f       	sbci	r24, 0xFF	; 255
 482:	9f 4f       	sbci	r25, 0xFF	; 255
 484:	99 23       	and	r25, r25
 486:	a9 f0       	breq	.+42     	; 0x4b2 <__floatsisf+0x40>
 488:	f9 2f       	mov	r31, r25
 48a:	96 e9       	ldi	r25, 0x96	; 150
 48c:	bb 27       	eor	r27, r27
 48e:	93 95       	inc	r25
 490:	f6 95       	lsr	r31
 492:	87 95       	ror	r24
 494:	77 95       	ror	r23
 496:	67 95       	ror	r22
 498:	b7 95       	ror	r27
 49a:	f1 11       	cpse	r31, r1
 49c:	f8 cf       	rjmp	.-16     	; 0x48e <__floatsisf+0x1c>
 49e:	fa f4       	brpl	.+62     	; 0x4de <__floatsisf+0x6c>
 4a0:	bb 0f       	add	r27, r27
 4a2:	11 f4       	brne	.+4      	; 0x4a8 <__floatsisf+0x36>
 4a4:	60 ff       	sbrs	r22, 0
 4a6:	1b c0       	rjmp	.+54     	; 0x4de <__floatsisf+0x6c>
 4a8:	6f 5f       	subi	r22, 0xFF	; 255
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	8f 4f       	sbci	r24, 0xFF	; 255
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	16 c0       	rjmp	.+44     	; 0x4de <__floatsisf+0x6c>
 4b2:	88 23       	and	r24, r24
 4b4:	11 f0       	breq	.+4      	; 0x4ba <__floatsisf+0x48>
 4b6:	96 e9       	ldi	r25, 0x96	; 150
 4b8:	11 c0       	rjmp	.+34     	; 0x4dc <__floatsisf+0x6a>
 4ba:	77 23       	and	r23, r23
 4bc:	21 f0       	breq	.+8      	; 0x4c6 <__floatsisf+0x54>
 4be:	9e e8       	ldi	r25, 0x8E	; 142
 4c0:	87 2f       	mov	r24, r23
 4c2:	76 2f       	mov	r23, r22
 4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <__floatsisf+0x5e>
 4c6:	66 23       	and	r22, r22
 4c8:	71 f0       	breq	.+28     	; 0x4e6 <__floatsisf+0x74>
 4ca:	96 e8       	ldi	r25, 0x86	; 134
 4cc:	86 2f       	mov	r24, r22
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	2a f0       	brmi	.+10     	; 0x4de <__floatsisf+0x6c>
 4d4:	9a 95       	dec	r25
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	88 1f       	adc	r24, r24
 4dc:	da f7       	brpl	.-10     	; 0x4d4 <__floatsisf+0x62>
 4de:	88 0f       	add	r24, r24
 4e0:	96 95       	lsr	r25
 4e2:	87 95       	ror	r24
 4e4:	97 f9       	bld	r25, 7
 4e6:	08 95       	ret

000004e8 <__fp_inf>:
 4e8:	97 f9       	bld	r25, 7
 4ea:	9f 67       	ori	r25, 0x7F	; 127
 4ec:	80 e8       	ldi	r24, 0x80	; 128
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	08 95       	ret

000004f4 <__fp_nan>:
 4f4:	9f ef       	ldi	r25, 0xFF	; 255
 4f6:	80 ec       	ldi	r24, 0xC0	; 192
 4f8:	08 95       	ret

000004fa <__fp_pscA>:
 4fa:	00 24       	eor	r0, r0
 4fc:	0a 94       	dec	r0
 4fe:	16 16       	cp	r1, r22
 500:	17 06       	cpc	r1, r23
 502:	18 06       	cpc	r1, r24
 504:	09 06       	cpc	r0, r25
 506:	08 95       	ret

00000508 <__fp_pscB>:
 508:	00 24       	eor	r0, r0
 50a:	0a 94       	dec	r0
 50c:	12 16       	cp	r1, r18
 50e:	13 06       	cpc	r1, r19
 510:	14 06       	cpc	r1, r20
 512:	05 06       	cpc	r0, r21
 514:	08 95       	ret

00000516 <__fp_round>:
 516:	09 2e       	mov	r0, r25
 518:	03 94       	inc	r0
 51a:	00 0c       	add	r0, r0
 51c:	11 f4       	brne	.+4      	; 0x522 <__fp_round+0xc>
 51e:	88 23       	and	r24, r24
 520:	52 f0       	brmi	.+20     	; 0x536 <__fp_round+0x20>
 522:	bb 0f       	add	r27, r27
 524:	40 f4       	brcc	.+16     	; 0x536 <__fp_round+0x20>
 526:	bf 2b       	or	r27, r31
 528:	11 f4       	brne	.+4      	; 0x52e <__fp_round+0x18>
 52a:	60 ff       	sbrs	r22, 0
 52c:	04 c0       	rjmp	.+8      	; 0x536 <__fp_round+0x20>
 52e:	6f 5f       	subi	r22, 0xFF	; 255
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	08 95       	ret

00000538 <__fp_split3>:
 538:	57 fd       	sbrc	r21, 7
 53a:	90 58       	subi	r25, 0x80	; 128
 53c:	44 0f       	add	r20, r20
 53e:	55 1f       	adc	r21, r21
 540:	59 f0       	breq	.+22     	; 0x558 <__fp_splitA+0x10>
 542:	5f 3f       	cpi	r21, 0xFF	; 255
 544:	71 f0       	breq	.+28     	; 0x562 <__fp_splitA+0x1a>
 546:	47 95       	ror	r20

00000548 <__fp_splitA>:
 548:	88 0f       	add	r24, r24
 54a:	97 fb       	bst	r25, 7
 54c:	99 1f       	adc	r25, r25
 54e:	61 f0       	breq	.+24     	; 0x568 <__fp_splitA+0x20>
 550:	9f 3f       	cpi	r25, 0xFF	; 255
 552:	79 f0       	breq	.+30     	; 0x572 <__fp_splitA+0x2a>
 554:	87 95       	ror	r24
 556:	08 95       	ret
 558:	12 16       	cp	r1, r18
 55a:	13 06       	cpc	r1, r19
 55c:	14 06       	cpc	r1, r20
 55e:	55 1f       	adc	r21, r21
 560:	f2 cf       	rjmp	.-28     	; 0x546 <__fp_split3+0xe>
 562:	46 95       	lsr	r20
 564:	f1 df       	rcall	.-30     	; 0x548 <__fp_splitA>
 566:	08 c0       	rjmp	.+16     	; 0x578 <__fp_splitA+0x30>
 568:	16 16       	cp	r1, r22
 56a:	17 06       	cpc	r1, r23
 56c:	18 06       	cpc	r1, r24
 56e:	99 1f       	adc	r25, r25
 570:	f1 cf       	rjmp	.-30     	; 0x554 <__fp_splitA+0xc>
 572:	86 95       	lsr	r24
 574:	71 05       	cpc	r23, r1
 576:	61 05       	cpc	r22, r1
 578:	08 94       	sec
 57a:	08 95       	ret

0000057c <__fp_zero>:
 57c:	e8 94       	clt

0000057e <__fp_szero>:
 57e:	bb 27       	eor	r27, r27
 580:	66 27       	eor	r22, r22
 582:	77 27       	eor	r23, r23
 584:	cb 01       	movw	r24, r22
 586:	97 f9       	bld	r25, 7
 588:	08 95       	ret

0000058a <__mulsf3>:
 58a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__mulsf3x>
 58e:	0c 94 8b 02 	jmp	0x516	; 0x516 <__fp_round>
 592:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fp_pscA>
 596:	38 f0       	brcs	.+14     	; 0x5a6 <__mulsf3+0x1c>
 598:	0e 94 84 02 	call	0x508	; 0x508 <__fp_pscB>
 59c:	20 f0       	brcs	.+8      	; 0x5a6 <__mulsf3+0x1c>
 59e:	95 23       	and	r25, r21
 5a0:	11 f0       	breq	.+4      	; 0x5a6 <__mulsf3+0x1c>
 5a2:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_inf>
 5a6:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__fp_nan>
 5aa:	11 24       	eor	r1, r1
 5ac:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__fp_szero>

000005b0 <__mulsf3x>:
 5b0:	0e 94 9c 02 	call	0x538	; 0x538 <__fp_split3>
 5b4:	70 f3       	brcs	.-36     	; 0x592 <__mulsf3+0x8>

000005b6 <__mulsf3_pse>:
 5b6:	95 9f       	mul	r25, r21
 5b8:	c1 f3       	breq	.-16     	; 0x5aa <__mulsf3+0x20>
 5ba:	95 0f       	add	r25, r21
 5bc:	50 e0       	ldi	r21, 0x00	; 0
 5be:	55 1f       	adc	r21, r21
 5c0:	62 9f       	mul	r22, r18
 5c2:	f0 01       	movw	r30, r0
 5c4:	72 9f       	mul	r23, r18
 5c6:	bb 27       	eor	r27, r27
 5c8:	f0 0d       	add	r31, r0
 5ca:	b1 1d       	adc	r27, r1
 5cc:	63 9f       	mul	r22, r19
 5ce:	aa 27       	eor	r26, r26
 5d0:	f0 0d       	add	r31, r0
 5d2:	b1 1d       	adc	r27, r1
 5d4:	aa 1f       	adc	r26, r26
 5d6:	64 9f       	mul	r22, r20
 5d8:	66 27       	eor	r22, r22
 5da:	b0 0d       	add	r27, r0
 5dc:	a1 1d       	adc	r26, r1
 5de:	66 1f       	adc	r22, r22
 5e0:	82 9f       	mul	r24, r18
 5e2:	22 27       	eor	r18, r18
 5e4:	b0 0d       	add	r27, r0
 5e6:	a1 1d       	adc	r26, r1
 5e8:	62 1f       	adc	r22, r18
 5ea:	73 9f       	mul	r23, r19
 5ec:	b0 0d       	add	r27, r0
 5ee:	a1 1d       	adc	r26, r1
 5f0:	62 1f       	adc	r22, r18
 5f2:	83 9f       	mul	r24, r19
 5f4:	a0 0d       	add	r26, r0
 5f6:	61 1d       	adc	r22, r1
 5f8:	22 1f       	adc	r18, r18
 5fa:	74 9f       	mul	r23, r20
 5fc:	33 27       	eor	r19, r19
 5fe:	a0 0d       	add	r26, r0
 600:	61 1d       	adc	r22, r1
 602:	23 1f       	adc	r18, r19
 604:	84 9f       	mul	r24, r20
 606:	60 0d       	add	r22, r0
 608:	21 1d       	adc	r18, r1
 60a:	82 2f       	mov	r24, r18
 60c:	76 2f       	mov	r23, r22
 60e:	6a 2f       	mov	r22, r26
 610:	11 24       	eor	r1, r1
 612:	9f 57       	subi	r25, 0x7F	; 127
 614:	50 40       	sbci	r21, 0x00	; 0
 616:	9a f0       	brmi	.+38     	; 0x63e <__mulsf3_pse+0x88>
 618:	f1 f0       	breq	.+60     	; 0x656 <__mulsf3_pse+0xa0>
 61a:	88 23       	and	r24, r24
 61c:	4a f0       	brmi	.+18     	; 0x630 <__mulsf3_pse+0x7a>
 61e:	ee 0f       	add	r30, r30
 620:	ff 1f       	adc	r31, r31
 622:	bb 1f       	adc	r27, r27
 624:	66 1f       	adc	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	88 1f       	adc	r24, r24
 62a:	91 50       	subi	r25, 0x01	; 1
 62c:	50 40       	sbci	r21, 0x00	; 0
 62e:	a9 f7       	brne	.-22     	; 0x61a <__mulsf3_pse+0x64>
 630:	9e 3f       	cpi	r25, 0xFE	; 254
 632:	51 05       	cpc	r21, r1
 634:	80 f0       	brcs	.+32     	; 0x656 <__mulsf3_pse+0xa0>
 636:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_inf>
 63a:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__fp_szero>
 63e:	5f 3f       	cpi	r21, 0xFF	; 255
 640:	e4 f3       	brlt	.-8      	; 0x63a <__mulsf3_pse+0x84>
 642:	98 3e       	cpi	r25, 0xE8	; 232
 644:	d4 f3       	brlt	.-12     	; 0x63a <__mulsf3_pse+0x84>
 646:	86 95       	lsr	r24
 648:	77 95       	ror	r23
 64a:	67 95       	ror	r22
 64c:	b7 95       	ror	r27
 64e:	f7 95       	ror	r31
 650:	e7 95       	ror	r30
 652:	9f 5f       	subi	r25, 0xFF	; 255
 654:	c1 f7       	brne	.-16     	; 0x646 <__mulsf3_pse+0x90>
 656:	fe 2b       	or	r31, r30
 658:	88 0f       	add	r24, r24
 65a:	91 1d       	adc	r25, r1
 65c:	96 95       	lsr	r25
 65e:	87 95       	ror	r24
 660:	97 f9       	bld	r25, 7
 662:	08 95       	ret
 664:	19 f4       	brne	.+6      	; 0x66c <__mulsf3_pse+0xb6>
 666:	16 f4       	brtc	.+4      	; 0x66c <__mulsf3_pse+0xb6>
 668:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__fp_nan>
 66c:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__fp_mpack>

00000670 <sqrt>:
 670:	0e 94 a4 02 	call	0x548	; 0x548 <__fp_splitA>
 674:	b8 f3       	brcs	.-18     	; 0x664 <__mulsf3_pse+0xae>
 676:	99 23       	and	r25, r25
 678:	c9 f3       	breq	.-14     	; 0x66c <__mulsf3_pse+0xb6>
 67a:	b6 f3       	brts	.-20     	; 0x668 <__mulsf3_pse+0xb2>
 67c:	9f 57       	subi	r25, 0x7F	; 127
 67e:	55 0b       	sbc	r21, r21
 680:	87 ff       	sbrs	r24, 7
 682:	0e 94 86 03 	call	0x70c	; 0x70c <__fp_norm2>
 686:	00 24       	eor	r0, r0
 688:	a0 e6       	ldi	r26, 0x60	; 96
 68a:	40 ea       	ldi	r20, 0xA0	; 160
 68c:	90 01       	movw	r18, r0
 68e:	80 58       	subi	r24, 0x80	; 128
 690:	56 95       	lsr	r21
 692:	97 95       	ror	r25
 694:	28 f4       	brcc	.+10     	; 0x6a0 <sqrt+0x30>
 696:	80 5c       	subi	r24, 0xC0	; 192
 698:	66 0f       	add	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	20 f0       	brcs	.+8      	; 0x6a8 <sqrt+0x38>
 6a0:	26 17       	cp	r18, r22
 6a2:	37 07       	cpc	r19, r23
 6a4:	48 07       	cpc	r20, r24
 6a6:	30 f4       	brcc	.+12     	; 0x6b4 <sqrt+0x44>
 6a8:	62 1b       	sub	r22, r18
 6aa:	73 0b       	sbc	r23, r19
 6ac:	84 0b       	sbc	r24, r20
 6ae:	20 29       	or	r18, r0
 6b0:	31 29       	or	r19, r1
 6b2:	4a 2b       	or	r20, r26
 6b4:	a6 95       	lsr	r26
 6b6:	17 94       	ror	r1
 6b8:	07 94       	ror	r0
 6ba:	20 25       	eor	r18, r0
 6bc:	31 25       	eor	r19, r1
 6be:	4a 27       	eor	r20, r26
 6c0:	58 f7       	brcc	.-42     	; 0x698 <sqrt+0x28>
 6c2:	66 0f       	add	r22, r22
 6c4:	77 1f       	adc	r23, r23
 6c6:	88 1f       	adc	r24, r24
 6c8:	20 f0       	brcs	.+8      	; 0x6d2 <sqrt+0x62>
 6ca:	26 17       	cp	r18, r22
 6cc:	37 07       	cpc	r19, r23
 6ce:	48 07       	cpc	r20, r24
 6d0:	30 f4       	brcc	.+12     	; 0x6de <sqrt+0x6e>
 6d2:	62 0b       	sbc	r22, r18
 6d4:	73 0b       	sbc	r23, r19
 6d6:	84 0b       	sbc	r24, r20
 6d8:	20 0d       	add	r18, r0
 6da:	31 1d       	adc	r19, r1
 6dc:	41 1d       	adc	r20, r1
 6de:	a0 95       	com	r26
 6e0:	81 f7       	brne	.-32     	; 0x6c2 <sqrt+0x52>
 6e2:	b9 01       	movw	r22, r18
 6e4:	84 2f       	mov	r24, r20
 6e6:	91 58       	subi	r25, 0x81	; 129
 6e8:	88 0f       	add	r24, r24
 6ea:	96 95       	lsr	r25
 6ec:	87 95       	ror	r24
 6ee:	08 95       	ret

000006f0 <__fp_mpack>:
 6f0:	9f 3f       	cpi	r25, 0xFF	; 255
 6f2:	31 f0       	breq	.+12     	; 0x700 <__fp_mpack_finite+0xc>

000006f4 <__fp_mpack_finite>:
 6f4:	91 50       	subi	r25, 0x01	; 1
 6f6:	20 f4       	brcc	.+8      	; 0x700 <__fp_mpack_finite+0xc>
 6f8:	87 95       	ror	r24
 6fa:	77 95       	ror	r23
 6fc:	67 95       	ror	r22
 6fe:	b7 95       	ror	r27
 700:	88 0f       	add	r24, r24
 702:	91 1d       	adc	r25, r1
 704:	96 95       	lsr	r25
 706:	87 95       	ror	r24
 708:	97 f9       	bld	r25, 7
 70a:	08 95       	ret

0000070c <__fp_norm2>:
 70c:	91 50       	subi	r25, 0x01	; 1
 70e:	50 40       	sbci	r21, 0x00	; 0
 710:	66 0f       	add	r22, r22
 712:	77 1f       	adc	r23, r23
 714:	88 1f       	adc	r24, r24
 716:	d2 f7       	brpl	.-12     	; 0x70c <__fp_norm2>
 718:	08 95       	ret

0000071a <_exit>:
 71a:	f8 94       	cli

0000071c <__stop_program>:
 71c:	ff cf       	rjmp	.-2      	; 0x71c <__stop_program>
