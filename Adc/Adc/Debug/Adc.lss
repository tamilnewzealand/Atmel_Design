
Adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000620  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000026d  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000149  00000000  00000000  000009a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000014e  00000000  00000000  00000aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b4  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e8  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  78:	0c 94 0e 03 	jmp	0x61c	; 0x61c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART0Init>:
#define I_Filter_Low 2
#define Mid_Supply 5

void USART0Init(void) {
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
  80:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)UBRR_VALUE;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24
	
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  8a:	e2 ec       	ldi	r30, 0xC2	; 194
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	86 60       	ori	r24, 0x06	; 6
  92:	80 83       	st	Z, r24
	
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
  94:	e1 ec       	ldi	r30, 0xC1	; 193
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	88 61       	ori	r24, 0x18	; 24
  9c:	80 83       	st	Z, r24
  9e:	08 95       	ret

000000a0 <USART0SendByte>:
}

int USART0SendByte(uint8_t data) {
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	95 ff       	sbrs	r25, 5
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <USART0SendByte+0x4>
	
	// Transmit data
	UDR0 = data;
  aa:	80 93 c6 00 	sts	0x00C6, r24
	return 0;
}
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret

000000b4 <USART0TransmitNumber>:

void USART0TransmitNumber(double value) {
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	cf 93       	push	r28
  be:	6b 01       	movw	r12, r22
  c0:	7c 01       	movw	r14, r24
	
	uint8_t digit;
	digit = (uint8_t)value % 10;
  c2:	0e 94 89 01 	call	0x312	; 0x312 <__fixunssfsi>
  c6:	cd ec       	ldi	r28, 0xCD	; 205
  c8:	6c 9f       	mul	r22, r28
  ca:	81 2d       	mov	r24, r1
  cc:	11 24       	eor	r1, r1
  ce:	86 95       	lsr	r24
  d0:	86 95       	lsr	r24
  d2:	86 95       	lsr	r24
  d4:	88 0f       	add	r24, r24
  d6:	98 2f       	mov	r25, r24
  d8:	99 0f       	add	r25, r25
  da:	99 0f       	add	r25, r25
  dc:	89 0f       	add	r24, r25
  de:	68 1b       	sub	r22, r24
  e0:	86 2f       	mov	r24, r22
	digit |= (1 << 6);
	digit |= (1 << 5);
	digit |= (1 << 4);
	USART0SendByte(digit);
  e2:	80 67       	ori	r24, 0x70	; 112
  e4:	0e 94 50 00 	call	0xa0	; 0xa0 <USART0SendByte>
	
	value *= 10;
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	40 e2       	ldi	r20, 0x20	; 32
  ee:	51 e4       	ldi	r21, 0x41	; 65
  f0:	c7 01       	movw	r24, r14
  f2:	b6 01       	movw	r22, r12
  f4:	0e 94 46 02 	call	0x48c	; 0x48c <__mulsf3>
  f8:	6b 01       	movw	r12, r22
  fa:	7c 01       	movw	r14, r24
	digit = (uint8_t)value % 10;
  fc:	0e 94 89 01 	call	0x312	; 0x312 <__fixunssfsi>
 100:	6c 9f       	mul	r22, r28
 102:	91 2d       	mov	r25, r1
 104:	11 24       	eor	r1, r1
 106:	96 95       	lsr	r25
 108:	96 95       	lsr	r25
 10a:	96 95       	lsr	r25
 10c:	99 0f       	add	r25, r25
 10e:	29 2f       	mov	r18, r25
 110:	22 0f       	add	r18, r18
 112:	22 0f       	add	r18, r18
 114:	92 0f       	add	r25, r18
 116:	86 2f       	mov	r24, r22
 118:	89 1b       	sub	r24, r25
	digit |= (1 << 6);
	digit &=~ (1 << 5);
	digit &=~ (1 << 4);
 11a:	8f 7c       	andi	r24, 0xCF	; 207
	USART0SendByte(digit);
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	0e 94 50 00 	call	0xa0	; 0xa0 <USART0SendByte>
	
	value *= 10;
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	40 e2       	ldi	r20, 0x20	; 32
 128:	51 e4       	ldi	r21, 0x41	; 65
 12a:	c7 01       	movw	r24, r14
 12c:	b6 01       	movw	r22, r12
 12e:	0e 94 46 02 	call	0x48c	; 0x48c <__mulsf3>
	digit = (uint8_t)value % 10;
 132:	0e 94 89 01 	call	0x312	; 0x312 <__fixunssfsi>
 136:	6c 9f       	mul	r22, r28
 138:	c1 2d       	mov	r28, r1
 13a:	11 24       	eor	r1, r1
 13c:	c6 95       	lsr	r28
 13e:	c6 95       	lsr	r28
 140:	c6 95       	lsr	r28
 142:	cc 0f       	add	r28, r28
 144:	8c 2f       	mov	r24, r28
 146:	88 0f       	add	r24, r24
 148:	88 0f       	add	r24, r24
 14a:	c8 0f       	add	r28, r24
 14c:	6c 1b       	sub	r22, r28
	digit &=~ (1 << 6);
	digit |= (1 << 5);
	digit &=~ (1 << 4);
 14e:	86 2f       	mov	r24, r22
 150:	8f 7a       	andi	r24, 0xAF	; 175
	USART0SendByte(digit);
 152:	80 62       	ori	r24, 0x20	; 32
 154:	0e 94 50 00 	call	0xa0	; 0xa0 <USART0SendByte>
	
	USART0SendByte(0x0A);
 158:	8a e0       	ldi	r24, 0x0A	; 10
 15a:	0e 94 50 00 	call	0xa0	; 0xa0 <USART0SendByte>
	
}
 15e:	cf 91       	pop	r28
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	df 90       	pop	r13
 166:	cf 90       	pop	r12
 168:	08 95       	ret

0000016a <InitADC>:

void InitADC() {
	// Select Vref to internal AREF
	ADMUX |= (1<<REFS0);
 16a:	ec e7       	ldi	r30, 0x7C	; 124
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 64       	ori	r24, 0x40	; 64
 172:	80 83       	st	Z, r24
	
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	87 68       	ori	r24, 0x87	; 135
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <ReadADC>:
}

uint16_t ReadADC(uint8_t ADCchannel) {
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
 180:	ec e7       	ldi	r30, 0x7C	; 124
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	90 81       	ld	r25, Z
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	90 7f       	andi	r25, 0xF0	; 240
 18a:	89 2b       	or	r24, r25
 18c:	80 83       	st	Z, r24
	
	//single conversion mode
	ADCSRA |= (1<<ADSC);
 18e:	ea e7       	ldi	r30, 0x7A	; 122
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	80 64       	ori	r24, 0x40	; 64
 196:	80 83       	st	Z, r24
	
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
 198:	80 81       	ld	r24, Z
 19a:	86 fd       	sbrc	r24, 6
 19c:	fd cf       	rjmp	.-6      	; 0x198 <ReadADC+0x18>
	return ADC;
 19e:	80 91 78 00 	lds	r24, 0x0078
 1a2:	90 91 79 00 	lds	r25, 0x0079
}
 1a6:	08 95       	ret

000001a8 <CalcRMS>:

uint16_t CalcRMS(uint8_t ADCchannel) {
 1a8:	8f 92       	push	r8
 1aa:	9f 92       	push	r9
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	d8 2f       	mov	r29, r24
 1b6:	cf e3       	ldi	r28, 0x3F	; 63
	double value = 0x00000000;
 1b8:	81 2c       	mov	r8, r1
 1ba:	91 2c       	mov	r9, r1
 1bc:	54 01       	movw	r10, r8
	uint8_t i;
	uint16_t x;
	// Approximating 64 successive ADC Readings
	for (i = 0; i < 63; i++) {
		x = ReadADC(ADCchannel);
 1be:	8d 2f       	mov	r24, r29
 1c0:	0e 94 c0 00 	call	0x180	; 0x180 <ReadADC>
		value += (double)x * (double)x;
 1c4:	bc 01       	movw	r22, r24
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 b8 01 	call	0x370	; 0x370 <__floatunsisf>
 1ce:	9b 01       	movw	r18, r22
 1d0:	ac 01       	movw	r20, r24
 1d2:	0e 94 46 02 	call	0x48c	; 0x48c <__mulsf3>
 1d6:	9b 01       	movw	r18, r22
 1d8:	ac 01       	movw	r20, r24
 1da:	c5 01       	movw	r24, r10
 1dc:	b4 01       	movw	r22, r8
 1de:	0e 94 1d 01 	call	0x23a	; 0x23a <__addsf3>
 1e2:	4b 01       	movw	r8, r22
 1e4:	5c 01       	movw	r10, r24
 1e6:	c1 50       	subi	r28, 0x01	; 1
uint16_t CalcRMS(uint8_t ADCchannel) {
	double value = 0x00000000;
	uint8_t i;
	uint16_t x;
	// Approximating 64 successive ADC Readings
	for (i = 0; i < 63; i++) {
 1e8:	51 f7       	brne	.-44     	; 0x1be <CalcRMS+0x16>
		x = ReadADC(ADCchannel);
		value += (double)x * (double)x;
	}
	value = sqrt(value);
 1ea:	0e 94 b9 02 	call	0x572	; 0x572 <sqrt>
	value /= 8;
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	5e e3       	ldi	r21, 0x3E	; 62
 1f6:	0e 94 46 02 	call	0x48c	; 0x48c <__mulsf3>
	return (uint16_t)value;
 1fa:	0e 94 89 01 	call	0x312	; 0x312 <__fixunssfsi>
}
 1fe:	cb 01       	movw	r24, r22
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	bf 90       	pop	r11
 206:	af 90       	pop	r10
 208:	9f 90       	pop	r9
 20a:	8f 90       	pop	r8
 20c:	08 95       	ret

0000020e <main>:

int main() {
	
	double value;
	
	InitADC();	
 20e:	0e 94 b5 00 	call	0x16a	; 0x16a <InitADC>
	USART0Init();
 212:	0e 94 40 00 	call	0x80	; 0x80 <USART0Init>
	while(1) {
		value = (double)VREF/1024*CalcRMS(V_Filter);
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <CalcRMS>
 21c:	bc 01       	movw	r22, r24
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 b8 01 	call	0x370	; 0x370 <__floatunsisf>
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	40 ea       	ldi	r20, 0xA0	; 160
 22c:	5b e3       	ldi	r21, 0x3B	; 59
 22e:	0e 94 46 02 	call	0x48c	; 0x48c <__mulsf3>
		USART0TransmitNumber(value);
 232:	0e 94 5a 00 	call	0xb4	; 0xb4 <USART0TransmitNumber>
	}
 236:	ef cf       	rjmp	.-34     	; 0x216 <main+0x8>

00000238 <__subsf3>:
 238:	50 58       	subi	r21, 0x80	; 128

0000023a <__addsf3>:
 23a:	bb 27       	eor	r27, r27
 23c:	aa 27       	eor	r26, r26
 23e:	0e 94 34 01 	call	0x268	; 0x268 <__addsf3x>
 242:	0c 94 0c 02 	jmp	0x418	; 0x418 <__fp_round>
 246:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__fp_pscA>
 24a:	38 f0       	brcs	.+14     	; 0x25a <__addsf3+0x20>
 24c:	0e 94 05 02 	call	0x40a	; 0x40a <__fp_pscB>
 250:	20 f0       	brcs	.+8      	; 0x25a <__addsf3+0x20>
 252:	39 f4       	brne	.+14     	; 0x262 <__addsf3+0x28>
 254:	9f 3f       	cpi	r25, 0xFF	; 255
 256:	19 f4       	brne	.+6      	; 0x25e <__addsf3+0x24>
 258:	26 f4       	brtc	.+8      	; 0x262 <__addsf3+0x28>
 25a:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__fp_nan>
 25e:	0e f4       	brtc	.+2      	; 0x262 <__addsf3+0x28>
 260:	e0 95       	com	r30
 262:	e7 fb       	bst	r30, 7
 264:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__fp_inf>

00000268 <__addsf3x>:
 268:	e9 2f       	mov	r30, r25
 26a:	0e 94 1d 02 	call	0x43a	; 0x43a <__fp_split3>
 26e:	58 f3       	brcs	.-42     	; 0x246 <__addsf3+0xc>
 270:	ba 17       	cp	r27, r26
 272:	62 07       	cpc	r22, r18
 274:	73 07       	cpc	r23, r19
 276:	84 07       	cpc	r24, r20
 278:	95 07       	cpc	r25, r21
 27a:	20 f0       	brcs	.+8      	; 0x284 <__addsf3x+0x1c>
 27c:	79 f4       	brne	.+30     	; 0x29c <__addsf3x+0x34>
 27e:	a6 f5       	brtc	.+104    	; 0x2e8 <__addsf3x+0x80>
 280:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__fp_zero>
 284:	0e f4       	brtc	.+2      	; 0x288 <__addsf3x+0x20>
 286:	e0 95       	com	r30
 288:	0b 2e       	mov	r0, r27
 28a:	ba 2f       	mov	r27, r26
 28c:	a0 2d       	mov	r26, r0
 28e:	0b 01       	movw	r0, r22
 290:	b9 01       	movw	r22, r18
 292:	90 01       	movw	r18, r0
 294:	0c 01       	movw	r0, r24
 296:	ca 01       	movw	r24, r20
 298:	a0 01       	movw	r20, r0
 29a:	11 24       	eor	r1, r1
 29c:	ff 27       	eor	r31, r31
 29e:	59 1b       	sub	r21, r25
 2a0:	99 f0       	breq	.+38     	; 0x2c8 <__addsf3x+0x60>
 2a2:	59 3f       	cpi	r21, 0xF9	; 249
 2a4:	50 f4       	brcc	.+20     	; 0x2ba <__addsf3x+0x52>
 2a6:	50 3e       	cpi	r21, 0xE0	; 224
 2a8:	68 f1       	brcs	.+90     	; 0x304 <__addsf3x+0x9c>
 2aa:	1a 16       	cp	r1, r26
 2ac:	f0 40       	sbci	r31, 0x00	; 0
 2ae:	a2 2f       	mov	r26, r18
 2b0:	23 2f       	mov	r18, r19
 2b2:	34 2f       	mov	r19, r20
 2b4:	44 27       	eor	r20, r20
 2b6:	58 5f       	subi	r21, 0xF8	; 248
 2b8:	f3 cf       	rjmp	.-26     	; 0x2a0 <__addsf3x+0x38>
 2ba:	46 95       	lsr	r20
 2bc:	37 95       	ror	r19
 2be:	27 95       	ror	r18
 2c0:	a7 95       	ror	r26
 2c2:	f0 40       	sbci	r31, 0x00	; 0
 2c4:	53 95       	inc	r21
 2c6:	c9 f7       	brne	.-14     	; 0x2ba <__addsf3x+0x52>
 2c8:	7e f4       	brtc	.+30     	; 0x2e8 <__addsf3x+0x80>
 2ca:	1f 16       	cp	r1, r31
 2cc:	ba 0b       	sbc	r27, r26
 2ce:	62 0b       	sbc	r22, r18
 2d0:	73 0b       	sbc	r23, r19
 2d2:	84 0b       	sbc	r24, r20
 2d4:	ba f0       	brmi	.+46     	; 0x304 <__addsf3x+0x9c>
 2d6:	91 50       	subi	r25, 0x01	; 1
 2d8:	a1 f0       	breq	.+40     	; 0x302 <__addsf3x+0x9a>
 2da:	ff 0f       	add	r31, r31
 2dc:	bb 1f       	adc	r27, r27
 2de:	66 1f       	adc	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	c2 f7       	brpl	.-16     	; 0x2d6 <__addsf3x+0x6e>
 2e6:	0e c0       	rjmp	.+28     	; 0x304 <__addsf3x+0x9c>
 2e8:	ba 0f       	add	r27, r26
 2ea:	62 1f       	adc	r22, r18
 2ec:	73 1f       	adc	r23, r19
 2ee:	84 1f       	adc	r24, r20
 2f0:	48 f4       	brcc	.+18     	; 0x304 <__addsf3x+0x9c>
 2f2:	87 95       	ror	r24
 2f4:	77 95       	ror	r23
 2f6:	67 95       	ror	r22
 2f8:	b7 95       	ror	r27
 2fa:	f7 95       	ror	r31
 2fc:	9e 3f       	cpi	r25, 0xFE	; 254
 2fe:	08 f0       	brcs	.+2      	; 0x302 <__addsf3x+0x9a>
 300:	b0 cf       	rjmp	.-160    	; 0x262 <__addsf3+0x28>
 302:	93 95       	inc	r25
 304:	88 0f       	add	r24, r24
 306:	08 f0       	brcs	.+2      	; 0x30a <__addsf3x+0xa2>
 308:	99 27       	eor	r25, r25
 30a:	ee 0f       	add	r30, r30
 30c:	97 95       	ror	r25
 30e:	87 95       	ror	r24
 310:	08 95       	ret

00000312 <__fixunssfsi>:
 312:	0e 94 25 02 	call	0x44a	; 0x44a <__fp_splitA>
 316:	88 f0       	brcs	.+34     	; 0x33a <__fixunssfsi+0x28>
 318:	9f 57       	subi	r25, 0x7F	; 127
 31a:	98 f0       	brcs	.+38     	; 0x342 <__fixunssfsi+0x30>
 31c:	b9 2f       	mov	r27, r25
 31e:	99 27       	eor	r25, r25
 320:	b7 51       	subi	r27, 0x17	; 23
 322:	b0 f0       	brcs	.+44     	; 0x350 <__fixunssfsi+0x3e>
 324:	e1 f0       	breq	.+56     	; 0x35e <__fixunssfsi+0x4c>
 326:	66 0f       	add	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	88 1f       	adc	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	1a f0       	brmi	.+6      	; 0x336 <__fixunssfsi+0x24>
 330:	ba 95       	dec	r27
 332:	c9 f7       	brne	.-14     	; 0x326 <__fixunssfsi+0x14>
 334:	14 c0       	rjmp	.+40     	; 0x35e <__fixunssfsi+0x4c>
 336:	b1 30       	cpi	r27, 0x01	; 1
 338:	91 f0       	breq	.+36     	; 0x35e <__fixunssfsi+0x4c>
 33a:	0e 94 3f 02 	call	0x47e	; 0x47e <__fp_zero>
 33e:	b1 e0       	ldi	r27, 0x01	; 1
 340:	08 95       	ret
 342:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__fp_zero>
 346:	67 2f       	mov	r22, r23
 348:	78 2f       	mov	r23, r24
 34a:	88 27       	eor	r24, r24
 34c:	b8 5f       	subi	r27, 0xF8	; 248
 34e:	39 f0       	breq	.+14     	; 0x35e <__fixunssfsi+0x4c>
 350:	b9 3f       	cpi	r27, 0xF9	; 249
 352:	cc f3       	brlt	.-14     	; 0x346 <__fixunssfsi+0x34>
 354:	86 95       	lsr	r24
 356:	77 95       	ror	r23
 358:	67 95       	ror	r22
 35a:	b3 95       	inc	r27
 35c:	d9 f7       	brne	.-10     	; 0x354 <__fixunssfsi+0x42>
 35e:	3e f4       	brtc	.+14     	; 0x36e <__fixunssfsi+0x5c>
 360:	90 95       	com	r25
 362:	80 95       	com	r24
 364:	70 95       	com	r23
 366:	61 95       	neg	r22
 368:	7f 4f       	sbci	r23, 0xFF	; 255
 36a:	8f 4f       	sbci	r24, 0xFF	; 255
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	08 95       	ret

00000370 <__floatunsisf>:
 370:	e8 94       	clt
 372:	09 c0       	rjmp	.+18     	; 0x386 <__floatsisf+0x12>

00000374 <__floatsisf>:
 374:	97 fb       	bst	r25, 7
 376:	3e f4       	brtc	.+14     	; 0x386 <__floatsisf+0x12>
 378:	90 95       	com	r25
 37a:	80 95       	com	r24
 37c:	70 95       	com	r23
 37e:	61 95       	neg	r22
 380:	7f 4f       	sbci	r23, 0xFF	; 255
 382:	8f 4f       	sbci	r24, 0xFF	; 255
 384:	9f 4f       	sbci	r25, 0xFF	; 255
 386:	99 23       	and	r25, r25
 388:	a9 f0       	breq	.+42     	; 0x3b4 <__floatsisf+0x40>
 38a:	f9 2f       	mov	r31, r25
 38c:	96 e9       	ldi	r25, 0x96	; 150
 38e:	bb 27       	eor	r27, r27
 390:	93 95       	inc	r25
 392:	f6 95       	lsr	r31
 394:	87 95       	ror	r24
 396:	77 95       	ror	r23
 398:	67 95       	ror	r22
 39a:	b7 95       	ror	r27
 39c:	f1 11       	cpse	r31, r1
 39e:	f8 cf       	rjmp	.-16     	; 0x390 <__floatsisf+0x1c>
 3a0:	fa f4       	brpl	.+62     	; 0x3e0 <__floatsisf+0x6c>
 3a2:	bb 0f       	add	r27, r27
 3a4:	11 f4       	brne	.+4      	; 0x3aa <__floatsisf+0x36>
 3a6:	60 ff       	sbrs	r22, 0
 3a8:	1b c0       	rjmp	.+54     	; 0x3e0 <__floatsisf+0x6c>
 3aa:	6f 5f       	subi	r22, 0xFF	; 255
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	8f 4f       	sbci	r24, 0xFF	; 255
 3b0:	9f 4f       	sbci	r25, 0xFF	; 255
 3b2:	16 c0       	rjmp	.+44     	; 0x3e0 <__floatsisf+0x6c>
 3b4:	88 23       	and	r24, r24
 3b6:	11 f0       	breq	.+4      	; 0x3bc <__floatsisf+0x48>
 3b8:	96 e9       	ldi	r25, 0x96	; 150
 3ba:	11 c0       	rjmp	.+34     	; 0x3de <__floatsisf+0x6a>
 3bc:	77 23       	and	r23, r23
 3be:	21 f0       	breq	.+8      	; 0x3c8 <__floatsisf+0x54>
 3c0:	9e e8       	ldi	r25, 0x8E	; 142
 3c2:	87 2f       	mov	r24, r23
 3c4:	76 2f       	mov	r23, r22
 3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <__floatsisf+0x5e>
 3c8:	66 23       	and	r22, r22
 3ca:	71 f0       	breq	.+28     	; 0x3e8 <__floatsisf+0x74>
 3cc:	96 e8       	ldi	r25, 0x86	; 134
 3ce:	86 2f       	mov	r24, r22
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	2a f0       	brmi	.+10     	; 0x3e0 <__floatsisf+0x6c>
 3d6:	9a 95       	dec	r25
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	88 1f       	adc	r24, r24
 3de:	da f7       	brpl	.-10     	; 0x3d6 <__floatsisf+0x62>
 3e0:	88 0f       	add	r24, r24
 3e2:	96 95       	lsr	r25
 3e4:	87 95       	ror	r24
 3e6:	97 f9       	bld	r25, 7
 3e8:	08 95       	ret

000003ea <__fp_inf>:
 3ea:	97 f9       	bld	r25, 7
 3ec:	9f 67       	ori	r25, 0x7F	; 127
 3ee:	80 e8       	ldi	r24, 0x80	; 128
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	08 95       	ret

000003f6 <__fp_nan>:
 3f6:	9f ef       	ldi	r25, 0xFF	; 255
 3f8:	80 ec       	ldi	r24, 0xC0	; 192
 3fa:	08 95       	ret

000003fc <__fp_pscA>:
 3fc:	00 24       	eor	r0, r0
 3fe:	0a 94       	dec	r0
 400:	16 16       	cp	r1, r22
 402:	17 06       	cpc	r1, r23
 404:	18 06       	cpc	r1, r24
 406:	09 06       	cpc	r0, r25
 408:	08 95       	ret

0000040a <__fp_pscB>:
 40a:	00 24       	eor	r0, r0
 40c:	0a 94       	dec	r0
 40e:	12 16       	cp	r1, r18
 410:	13 06       	cpc	r1, r19
 412:	14 06       	cpc	r1, r20
 414:	05 06       	cpc	r0, r21
 416:	08 95       	ret

00000418 <__fp_round>:
 418:	09 2e       	mov	r0, r25
 41a:	03 94       	inc	r0
 41c:	00 0c       	add	r0, r0
 41e:	11 f4       	brne	.+4      	; 0x424 <__fp_round+0xc>
 420:	88 23       	and	r24, r24
 422:	52 f0       	brmi	.+20     	; 0x438 <__fp_round+0x20>
 424:	bb 0f       	add	r27, r27
 426:	40 f4       	brcc	.+16     	; 0x438 <__fp_round+0x20>
 428:	bf 2b       	or	r27, r31
 42a:	11 f4       	brne	.+4      	; 0x430 <__fp_round+0x18>
 42c:	60 ff       	sbrs	r22, 0
 42e:	04 c0       	rjmp	.+8      	; 0x438 <__fp_round+0x20>
 430:	6f 5f       	subi	r22, 0xFF	; 255
 432:	7f 4f       	sbci	r23, 0xFF	; 255
 434:	8f 4f       	sbci	r24, 0xFF	; 255
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	08 95       	ret

0000043a <__fp_split3>:
 43a:	57 fd       	sbrc	r21, 7
 43c:	90 58       	subi	r25, 0x80	; 128
 43e:	44 0f       	add	r20, r20
 440:	55 1f       	adc	r21, r21
 442:	59 f0       	breq	.+22     	; 0x45a <__fp_splitA+0x10>
 444:	5f 3f       	cpi	r21, 0xFF	; 255
 446:	71 f0       	breq	.+28     	; 0x464 <__fp_splitA+0x1a>
 448:	47 95       	ror	r20

0000044a <__fp_splitA>:
 44a:	88 0f       	add	r24, r24
 44c:	97 fb       	bst	r25, 7
 44e:	99 1f       	adc	r25, r25
 450:	61 f0       	breq	.+24     	; 0x46a <__fp_splitA+0x20>
 452:	9f 3f       	cpi	r25, 0xFF	; 255
 454:	79 f0       	breq	.+30     	; 0x474 <__fp_splitA+0x2a>
 456:	87 95       	ror	r24
 458:	08 95       	ret
 45a:	12 16       	cp	r1, r18
 45c:	13 06       	cpc	r1, r19
 45e:	14 06       	cpc	r1, r20
 460:	55 1f       	adc	r21, r21
 462:	f2 cf       	rjmp	.-28     	; 0x448 <__fp_split3+0xe>
 464:	46 95       	lsr	r20
 466:	f1 df       	rcall	.-30     	; 0x44a <__fp_splitA>
 468:	08 c0       	rjmp	.+16     	; 0x47a <__fp_splitA+0x30>
 46a:	16 16       	cp	r1, r22
 46c:	17 06       	cpc	r1, r23
 46e:	18 06       	cpc	r1, r24
 470:	99 1f       	adc	r25, r25
 472:	f1 cf       	rjmp	.-30     	; 0x456 <__fp_splitA+0xc>
 474:	86 95       	lsr	r24
 476:	71 05       	cpc	r23, r1
 478:	61 05       	cpc	r22, r1
 47a:	08 94       	sec
 47c:	08 95       	ret

0000047e <__fp_zero>:
 47e:	e8 94       	clt

00000480 <__fp_szero>:
 480:	bb 27       	eor	r27, r27
 482:	66 27       	eor	r22, r22
 484:	77 27       	eor	r23, r23
 486:	cb 01       	movw	r24, r22
 488:	97 f9       	bld	r25, 7
 48a:	08 95       	ret

0000048c <__mulsf3>:
 48c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__mulsf3x>
 490:	0c 94 0c 02 	jmp	0x418	; 0x418 <__fp_round>
 494:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__fp_pscA>
 498:	38 f0       	brcs	.+14     	; 0x4a8 <__mulsf3+0x1c>
 49a:	0e 94 05 02 	call	0x40a	; 0x40a <__fp_pscB>
 49e:	20 f0       	brcs	.+8      	; 0x4a8 <__mulsf3+0x1c>
 4a0:	95 23       	and	r25, r21
 4a2:	11 f0       	breq	.+4      	; 0x4a8 <__mulsf3+0x1c>
 4a4:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__fp_inf>
 4a8:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__fp_nan>
 4ac:	11 24       	eor	r1, r1
 4ae:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_szero>

000004b2 <__mulsf3x>:
 4b2:	0e 94 1d 02 	call	0x43a	; 0x43a <__fp_split3>
 4b6:	70 f3       	brcs	.-36     	; 0x494 <__mulsf3+0x8>

000004b8 <__mulsf3_pse>:
 4b8:	95 9f       	mul	r25, r21
 4ba:	c1 f3       	breq	.-16     	; 0x4ac <__mulsf3+0x20>
 4bc:	95 0f       	add	r25, r21
 4be:	50 e0       	ldi	r21, 0x00	; 0
 4c0:	55 1f       	adc	r21, r21
 4c2:	62 9f       	mul	r22, r18
 4c4:	f0 01       	movw	r30, r0
 4c6:	72 9f       	mul	r23, r18
 4c8:	bb 27       	eor	r27, r27
 4ca:	f0 0d       	add	r31, r0
 4cc:	b1 1d       	adc	r27, r1
 4ce:	63 9f       	mul	r22, r19
 4d0:	aa 27       	eor	r26, r26
 4d2:	f0 0d       	add	r31, r0
 4d4:	b1 1d       	adc	r27, r1
 4d6:	aa 1f       	adc	r26, r26
 4d8:	64 9f       	mul	r22, r20
 4da:	66 27       	eor	r22, r22
 4dc:	b0 0d       	add	r27, r0
 4de:	a1 1d       	adc	r26, r1
 4e0:	66 1f       	adc	r22, r22
 4e2:	82 9f       	mul	r24, r18
 4e4:	22 27       	eor	r18, r18
 4e6:	b0 0d       	add	r27, r0
 4e8:	a1 1d       	adc	r26, r1
 4ea:	62 1f       	adc	r22, r18
 4ec:	73 9f       	mul	r23, r19
 4ee:	b0 0d       	add	r27, r0
 4f0:	a1 1d       	adc	r26, r1
 4f2:	62 1f       	adc	r22, r18
 4f4:	83 9f       	mul	r24, r19
 4f6:	a0 0d       	add	r26, r0
 4f8:	61 1d       	adc	r22, r1
 4fa:	22 1f       	adc	r18, r18
 4fc:	74 9f       	mul	r23, r20
 4fe:	33 27       	eor	r19, r19
 500:	a0 0d       	add	r26, r0
 502:	61 1d       	adc	r22, r1
 504:	23 1f       	adc	r18, r19
 506:	84 9f       	mul	r24, r20
 508:	60 0d       	add	r22, r0
 50a:	21 1d       	adc	r18, r1
 50c:	82 2f       	mov	r24, r18
 50e:	76 2f       	mov	r23, r22
 510:	6a 2f       	mov	r22, r26
 512:	11 24       	eor	r1, r1
 514:	9f 57       	subi	r25, 0x7F	; 127
 516:	50 40       	sbci	r21, 0x00	; 0
 518:	9a f0       	brmi	.+38     	; 0x540 <__mulsf3_pse+0x88>
 51a:	f1 f0       	breq	.+60     	; 0x558 <__mulsf3_pse+0xa0>
 51c:	88 23       	and	r24, r24
 51e:	4a f0       	brmi	.+18     	; 0x532 <__mulsf3_pse+0x7a>
 520:	ee 0f       	add	r30, r30
 522:	ff 1f       	adc	r31, r31
 524:	bb 1f       	adc	r27, r27
 526:	66 1f       	adc	r22, r22
 528:	77 1f       	adc	r23, r23
 52a:	88 1f       	adc	r24, r24
 52c:	91 50       	subi	r25, 0x01	; 1
 52e:	50 40       	sbci	r21, 0x00	; 0
 530:	a9 f7       	brne	.-22     	; 0x51c <__mulsf3_pse+0x64>
 532:	9e 3f       	cpi	r25, 0xFE	; 254
 534:	51 05       	cpc	r21, r1
 536:	80 f0       	brcs	.+32     	; 0x558 <__mulsf3_pse+0xa0>
 538:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__fp_inf>
 53c:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_szero>
 540:	5f 3f       	cpi	r21, 0xFF	; 255
 542:	e4 f3       	brlt	.-8      	; 0x53c <__mulsf3_pse+0x84>
 544:	98 3e       	cpi	r25, 0xE8	; 232
 546:	d4 f3       	brlt	.-12     	; 0x53c <__mulsf3_pse+0x84>
 548:	86 95       	lsr	r24
 54a:	77 95       	ror	r23
 54c:	67 95       	ror	r22
 54e:	b7 95       	ror	r27
 550:	f7 95       	ror	r31
 552:	e7 95       	ror	r30
 554:	9f 5f       	subi	r25, 0xFF	; 255
 556:	c1 f7       	brne	.-16     	; 0x548 <__mulsf3_pse+0x90>
 558:	fe 2b       	or	r31, r30
 55a:	88 0f       	add	r24, r24
 55c:	91 1d       	adc	r25, r1
 55e:	96 95       	lsr	r25
 560:	87 95       	ror	r24
 562:	97 f9       	bld	r25, 7
 564:	08 95       	ret
 566:	19 f4       	brne	.+6      	; 0x56e <__mulsf3_pse+0xb6>
 568:	16 f4       	brtc	.+4      	; 0x56e <__mulsf3_pse+0xb6>
 56a:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__fp_nan>
 56e:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__fp_mpack>

00000572 <sqrt>:
 572:	0e 94 25 02 	call	0x44a	; 0x44a <__fp_splitA>
 576:	b8 f3       	brcs	.-18     	; 0x566 <__mulsf3_pse+0xae>
 578:	99 23       	and	r25, r25
 57a:	c9 f3       	breq	.-14     	; 0x56e <__mulsf3_pse+0xb6>
 57c:	b6 f3       	brts	.-20     	; 0x56a <__mulsf3_pse+0xb2>
 57e:	9f 57       	subi	r25, 0x7F	; 127
 580:	55 0b       	sbc	r21, r21
 582:	87 ff       	sbrs	r24, 7
 584:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_norm2>
 588:	00 24       	eor	r0, r0
 58a:	a0 e6       	ldi	r26, 0x60	; 96
 58c:	40 ea       	ldi	r20, 0xA0	; 160
 58e:	90 01       	movw	r18, r0
 590:	80 58       	subi	r24, 0x80	; 128
 592:	56 95       	lsr	r21
 594:	97 95       	ror	r25
 596:	28 f4       	brcc	.+10     	; 0x5a2 <sqrt+0x30>
 598:	80 5c       	subi	r24, 0xC0	; 192
 59a:	66 0f       	add	r22, r22
 59c:	77 1f       	adc	r23, r23
 59e:	88 1f       	adc	r24, r24
 5a0:	20 f0       	brcs	.+8      	; 0x5aa <sqrt+0x38>
 5a2:	26 17       	cp	r18, r22
 5a4:	37 07       	cpc	r19, r23
 5a6:	48 07       	cpc	r20, r24
 5a8:	30 f4       	brcc	.+12     	; 0x5b6 <sqrt+0x44>
 5aa:	62 1b       	sub	r22, r18
 5ac:	73 0b       	sbc	r23, r19
 5ae:	84 0b       	sbc	r24, r20
 5b0:	20 29       	or	r18, r0
 5b2:	31 29       	or	r19, r1
 5b4:	4a 2b       	or	r20, r26
 5b6:	a6 95       	lsr	r26
 5b8:	17 94       	ror	r1
 5ba:	07 94       	ror	r0
 5bc:	20 25       	eor	r18, r0
 5be:	31 25       	eor	r19, r1
 5c0:	4a 27       	eor	r20, r26
 5c2:	58 f7       	brcc	.-42     	; 0x59a <sqrt+0x28>
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	88 1f       	adc	r24, r24
 5ca:	20 f0       	brcs	.+8      	; 0x5d4 <sqrt+0x62>
 5cc:	26 17       	cp	r18, r22
 5ce:	37 07       	cpc	r19, r23
 5d0:	48 07       	cpc	r20, r24
 5d2:	30 f4       	brcc	.+12     	; 0x5e0 <sqrt+0x6e>
 5d4:	62 0b       	sbc	r22, r18
 5d6:	73 0b       	sbc	r23, r19
 5d8:	84 0b       	sbc	r24, r20
 5da:	20 0d       	add	r18, r0
 5dc:	31 1d       	adc	r19, r1
 5de:	41 1d       	adc	r20, r1
 5e0:	a0 95       	com	r26
 5e2:	81 f7       	brne	.-32     	; 0x5c4 <sqrt+0x52>
 5e4:	b9 01       	movw	r22, r18
 5e6:	84 2f       	mov	r24, r20
 5e8:	91 58       	subi	r25, 0x81	; 129
 5ea:	88 0f       	add	r24, r24
 5ec:	96 95       	lsr	r25
 5ee:	87 95       	ror	r24
 5f0:	08 95       	ret

000005f2 <__fp_mpack>:
 5f2:	9f 3f       	cpi	r25, 0xFF	; 255
 5f4:	31 f0       	breq	.+12     	; 0x602 <__fp_mpack_finite+0xc>

000005f6 <__fp_mpack_finite>:
 5f6:	91 50       	subi	r25, 0x01	; 1
 5f8:	20 f4       	brcc	.+8      	; 0x602 <__fp_mpack_finite+0xc>
 5fa:	87 95       	ror	r24
 5fc:	77 95       	ror	r23
 5fe:	67 95       	ror	r22
 600:	b7 95       	ror	r27
 602:	88 0f       	add	r24, r24
 604:	91 1d       	adc	r25, r1
 606:	96 95       	lsr	r25
 608:	87 95       	ror	r24
 60a:	97 f9       	bld	r25, 7
 60c:	08 95       	ret

0000060e <__fp_norm2>:
 60e:	91 50       	subi	r25, 0x01	; 1
 610:	50 40       	sbci	r21, 0x00	; 0
 612:	66 0f       	add	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	88 1f       	adc	r24, r24
 618:	d2 f7       	brpl	.-12     	; 0x60e <__fp_norm2>
 61a:	08 95       	ret

0000061c <_exit>:
 61c:	f8 94       	cli

0000061e <__stop_program>:
 61e:	ff cf       	rjmp	.-2      	; 0x61e <__stop_program>
