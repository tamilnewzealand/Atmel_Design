
Group16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000140  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000015e  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f3  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000f3  00000000  00000000  000004b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000192  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012c  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  8e:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_init>:
 */ 

void uart_init()
{
	// Set baud rate using register UBRR0H and UBRR0L
	UBRR0H = (unsigned char) (BAUD>>8);
  96:	85 e2       	ldi	r24, 0x25	; 37
  98:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char) BAUD;
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	80 93 c4 00 	sts	0x00C4, r24
	
	// Set frame format:
	// 8 bit data format, 1 stop bit, no parity bit
	UCSR0B|= (1<<TXEN0);				//enable transmitter
  a2:	e1 ec       	ldi	r30, 0xC1	; 193
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	80 83       	st	Z, r24
	UCSR0C|= (1<<UCSZ00)|(1<<UCSZ01);	//8 bit data format
  ac:	e2 ec       	ldi	r30, 0xC2	; 194
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	86 60       	ori	r24, 0x06	; 6
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <uart_transmit>:
{
	
	// Wait for empty transmit buffer
	// Put data into buffer, sends the data
	
	while (!((1<<UDRE0) && UCSR0A)){
  b8:	90 91 c0 00 	lds	r25, 0x00C0
  bc:	91 11       	cpse	r25, r1
  be:	08 c0       	rjmp	.+16     	; 0xd0 <uart_transmit+0x18>
		UDR0 = data;	
  c0:	a6 ec       	ldi	r26, 0xC6	; 198
  c2:	b0 e0       	ldi	r27, 0x00	; 0
{
	
	// Wait for empty transmit buffer
	// Put data into buffer, sends the data
	
	while (!((1<<UDRE0) && UCSR0A)){
  c4:	e0 ec       	ldi	r30, 0xC0	; 192
  c6:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data;	
  c8:	8c 93       	st	X, r24
{
	
	// Wait for empty transmit buffer
	// Put data into buffer, sends the data
	
	while (!((1<<UDRE0) && UCSR0A)){
  ca:	90 81       	ld	r25, Z
  cc:	99 23       	and	r25, r25
  ce:	e1 f3       	breq	.-8      	; 0xc8 <uart_transmit+0x10>
  d0:	08 95       	ret

000000d2 <main>:


/* declare global variables here*/

int main( void )
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	2a 97       	sbiw	r28, 0x0a	; 10
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
	uart_init();
  e6:	0e 94 4b 00 	call	0x96	; 0x96 <uart_init>
	uint8_t TXBUF[] = {17, 23, 29, 37, 43, 53, 59, 67, 83, 97};
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	e0 e0       	ldi	r30, 0x00	; 0
  ee:	f1 e0       	ldi	r31, 0x01	; 1
  f0:	de 01       	movw	r26, r28
  f2:	11 96       	adiw	r26, 0x01	; 1
  f4:	01 90       	ld	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	8a 95       	dec	r24
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x22>
	uint8_t txindex = 0;
  fc:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t data;
	uint8_t digit;
	while (1){
		//read array
		data = TXBUF[txindex];
		digit = data % 10;
  fe:	0f 2e       	mov	r0, r31
 100:	fd ec       	ldi	r31, 0xCD	; 205
 102:	ff 2e       	mov	r15, r31
 104:	f0 2d       	mov	r31, r0
	uint8_t txindex = 0;
	uint8_t data;
	uint8_t digit;
	while (1){
		//read array
		data = TXBUF[txindex];
 106:	e1 e0       	ldi	r30, 0x01	; 1
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	e0 0f       	add	r30, r16
 110:	f1 1d       	adc	r31, r1
 112:	80 81       	ld	r24, Z
		digit = data % 10;
 114:	8f 9d       	mul	r24, r15
 116:	11 2d       	mov	r17, r1
 118:	11 24       	eor	r1, r1
 11a:	16 95       	lsr	r17
 11c:	16 95       	lsr	r17
 11e:	16 95       	lsr	r17
 120:	21 2f       	mov	r18, r17
 122:	22 0f       	add	r18, r18
 124:	92 2f       	mov	r25, r18
 126:	99 0f       	add	r25, r25
 128:	99 0f       	add	r25, r25
 12a:	92 0f       	add	r25, r18
		uart_transmit(digit);
 12c:	89 1b       	sub	r24, r25
 12e:	0e 94 5c 00 	call	0xb8	; 0xb8 <uart_transmit>
		digit = data / 10;
		uart_transmit(digit);
 132:	81 2f       	mov	r24, r17
 134:	0e 94 5c 00 	call	0xb8	; 0xb8 <uart_transmit>
		txindex++;
 138:	0f 5f       	subi	r16, 0xFF	; 255
	}
 13a:	e5 cf       	rjmp	.-54     	; 0x106 <main+0x34>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
